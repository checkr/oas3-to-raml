#%RAML 1.0
title: Checkr.com API Docs
description: >
  # Introduction


  Checkr is a modern,
  [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer)
  API-driven background screening service. The Checkr API uses resource-oriented
  URLs, supports HTTPS authentication and HTTPS verbs, and leverages
  [JSON](http://www.json.org/) in all responses passed back to customers.


  Checkr is used by over 10,000 customers in a wide variety of industries, and
  supports a range of screening products and candidate workflows. For a full
  list of our screenings, please see the Checkr [Screenings
  section](#tag/SSN-Trace) below or read the Checkr Help Center articles on
  [Screening
  Types](https://help.checkr.com/hc/en-us/sections/203637147-Screening-Types).


  This Programming Guide is designed to help customers get up-and-running with
  Checkr's background screening services, both by providing the necessary
  context to understand the background screening industry and its regulations,
  and by giving technical guidance on how to work with the Checkr API.


  **Note:** The cURL command is used for all examples in the Checkr API
  documentation.


  ### Other resources


  For a complete set of [User Guides for the Checkr
  Dashboard](https://help.checkr.com/hc/en-us/sections/360002119753-Checkr-Dashboard-User-Guide),
  and more information on the
  [compliance](https://help.checkr.com/hc/en-us/sections/203637107-Compliance)
  and regulatory aspects of background screenings, please see the [Checkr Help
  Center](https://help.checkr.com).


  For a more targeted set of Checkr Dashboard learning paths for talent sourcing
  roles like Recruiters, Adjudicators, or Program Administrators, please see the
  [Checkr Learning Center](https://learn.checkr.com).


  ## Understand the screening process


  Checkr follows a standardized screening process:


  1. Customer requests a background check.

  2. Candidate is presented with and signs the necessary disclosures and
  authorizations, and submits the requested Personally Identifiable Information
  (PII).
    -   With a Checkr-hosted invitation flow, the candidate signs disclosures and authorizations and enters their own PII.
    -   With a customer-hosted flow, the customer collects the required authorizations, and passes Checkr candidate PII using the Checkr API.
  3. Checkr conducts an SSN Trace, and collects associated addresses.

  4. Checkr runs searches or verifications based on the screening Packages
  requested.

  5. Checkr applies appropriate compliance filters based on the customer’s
  settings and candidate’s provided residence to determine which records to
  show, and returns a finalized report to the customer.

  6. If there is a record on the report, the customer Engages or Adverse Actions
  the Candidate, based on an individualized assessment of the candidate's
  report.


  ### 1. Request a background check


  To initiate a background check, a customer provides Checkr their candidate's
  email address (for a Checkr-hosted invitation flow) or the candidate's PII
  (for a customer-hosted flow). For more information on ways to achieve this,
  please see [Designing your
  workflow](#section/Introduction/Designing-your-workflow).


  ### 2. Candidate signs disclosures and authorizations


  Under the U.S. Fair Credit Reporting Act (FCRA), customers are obligated to
  collect consent from their candidates when running background checks through
  Checkr or any other Consumer Reporting Agency (CRA).


  The Checkr-hosted flow presents candidates with fields in which the requested
  PII may be entered, and collects candidate information on behalf of the
  customer. Checkr will also present disclosures and authorizations to the
  candidate, and enable eSignature to capture consent, on behalf of customers
  using this flow with the Checkr Dashboard or email invitation flow.


  Customer-hosted flows collect candidate PII, and pass the information to
  Checkr using the Checkr API. Customers creating a self-hosted flow will
  receive guidance from the Checkr team on setting up a similar process as
  required.


  ### 3. Checkr runs an SSN Trace


  Checkr runs an SSN Trace to match the candidate’s provided PII with existing
  credit header data mapped to the SSN. This process yields a list of names and
  addresses associated with the entered SSN, which can be used to supplement the
  background check process.


  At this point Checkr also conducts some initial data comparisons to check that
  critical pieces of information, like a candidate's submitted Date of Birth
  (DOB) and SSN, align with information held on file by the credit bureaus. If
  there is information that looks out of place, Checkr may reach out directly to
  the candidate, through their email address, to gain further confirmation or
  data from the individual.


  Once the candidate's information has been confirmed and an address history
  developed, the background check screening process begins.


  ### 4. Checkr runs the requested Screenings


  Checkr then runs the customer's requested Screenings. Based on the results of
  the SSN Trace, Checkr may expand the search for the requested Screenings to
  include counties where the candidate may have lived in the past.


  ### 5. Completed Report is returned


  Once a report has been completed, customers receive a report assessment update
  of **Clear** or **Consider** through their selected method of API webhooks,
  email, or Checkr Dashboard notifications.


  **Clear** and **Consider** are the default assessments. A Clear assessment can
  be interpreted as that report having no items listed on the candidate’s record
  that require consideration. A report with an assessment of Consider indicates
  that there are items on the candidate’s report that require your review. With
  both Clear and Consider reports, customers must decide whether or not to
  engage a candidate. Checkr does not make this determination on the customer’s
  behalf.


  ### 6. Customer evaluates the Report


  After the Report is completed and returned, the customer must evaluate the
  report, and make a final hiring determination. In maintaining a process
  compliant with per FCRA legislation and EEOC guidelines, Checkr does not make
  this determination on the customer's behalf.


  ## Get credentialed


  Before gaining a Checkr test or production account, you must first work with a
  Checkr Account Executive or Customer Success representative to create and
  credential your account.


  ### Credentialing and authorizing your account


  The background screening industry in the United States is heavily regulated by
  federal, state, and local levels of government, and primarily by the [Fair
  Credit Reporting Act
  (FCRA)](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/fair-credit-reporting-act).
  Checkr complies with these laws, and helps its customers comply, through
  multiple Checkr product features.


  Two key processes in the account authorization process also enable compliance:
  establishing permissible purpose, and confirming a compliant user interface
  workflow.


  ### Establishing permissible purpose


  One of the main provisions of FCRA is the requirement to establish a
  legitimate "permissible purpose" for running a background screen on an
  individual. These permissible purposes include running background screens for
  employment purposes (that is, making hiring decisions), making a decision to
  extend credit to an individual, or for what the law calls a "legitimate
  business purpose".


  Checkr establishes a customer's permissible purpose by collecting and
  confirming a number of key details about the business entity running a
  background screen, including:


  - Legal business name (associated with Employer Identification Number)

  - State of incorporation

  - Articles of incorporation

  - Employer Identification Number


  Some permissible purposes may impose additional legal requirements on the
  business entity running a background screen. For example, purposes involving
  checking a candidate's credit history require [an onsite inspection of the
  entity's business
  premises](https://www.transunion.com/data-reporting/getting-started).


  ### Confirming a compliant user interface (UI) workflow


  When building a candidate user experience that includes the capture of
  information necessary to run a background check, there are a number of
  essential components that must be included to send a compliant request to
  Checkr. For more information on these requirements and best practices, please
  see [Building your candidate
  experience](#section/Introduction/Designing-your-workflow/Building-your-candidate-experience).


  Before a Checkr account is credentialed and authorized for production API
  access, the Checkr Customer Success team confirms that your UI/UX flow meets
  our requirements and that all necessary information is being appropriately
  captured. More details about these requirements are included below and
  throughout the Checkr customer account onboarding process.


  ## Test and production API keys


  Checkr authenticates your API requests using your account's API keys. If you
  do not include your key when making an API request, Checkr returns an
  authentication error.


  Each Checkr account has two pairs of API keys: a test pair and a production
  pair. Checkr supports both a test and production environment, and resources
  like Candidates, Reports, and Packages in one environment will not transfer to
  the other. For more information, please see [The Checkr test
  environment](#section/Test-Environment) below.


  There are two types of API keys: publishable and secret.


  - **Publishable API keys** are meant solely to identify your account with
  Checkr. They aren't secret, and they can be used only to create Candidates in
  your account. They can safely be published in places like your site's
  JavaScript code, or in an Android or iPhone app.

  - **Secret API keys** should be kept confidential and stored only on your own
  servers. Your account's secret API key can perform any API request to Checkr
  without restriction.


  ### Using your API keys


  Once your Checkr account has been created, your API keys will be available in
  the Checkr Dashboard, in the Account Settings > [Developer
  Settings](https://help.checkr.com/hc/en-us/articles/360010450474-Account-Settings#developer)
  pane.


  Use your test API keys only for testing and development. This ensures you
  don't accidentally request production background screenings for which you'll
  be charged.


  **Test mode**


  Checkr's test environment is completely separate from the production
  environment. Candidates, Reports, Packages, and Geos created in one
  environment will not be reflected in the other. To view the test data and
  objects available in your account, toggle the [Test
  option](https://help.checkr.com/hc/en-us/articles/360010450334-Home) in the
  upper left corner of the Checkr Dashboard.


  The test environment is built to mimic the production environment and allow
  developers to build without running production background screenings and
  incurring a charge. However, there are a few key differences between the
  behavior of the test and production environments. These are outlined in [Uses
  and limitations of the test
  environment](#section/The-Checkr-test-environment/Uses-and-limitations-of-the-test-environment).


  **Keeping your keys safe**


  Access to your API keys should be granted only to those that need them. Your
  secret API key can be used to make any API call on behalf of your account,
  such as creating Candidates, requesting and upgrading Screenings, and creating
  Geos. Your publishable API key can only create Candidates in the Checkr
  system, and may be used to publish app or site builds.


  To further protect your keys, ensure that they are not included in any version
  control system that you may be using.


  **Expiring keys**


  If an API key is compromised, expire the key in the [Checkr
  Dashboard](https://help.checkr.com/hc/en-us/articles/360010450474-Account-Settings#developer)
  to block it. Click **Expire key** to set an expiration date for the selected
  key, and **Create new key** to create a new one to replace it.


  ![](images/ExpireKeys.png)


  ## Designing your workflow


  Checkr's API is flexible enough to support a range of workflows for
  integrating background screening into your candidate onboarding process. At a
  high-level there are three options, each with unique benefits and
  disadvantages:


  | Option | Benefits | Disadvantages |

  |:--|:--|:--|

  | Customer-hosted candidate experience | <ul><li>Seamless, customizable user
  experience</li><li>Potential for higher candidate conversion
  rates</li><li>Ability to measure conversion at each stage</li></ul> |
  <ul><li>Requires greater engineering resources</li><li>Customer must host and
  maintain compliance language in their product</li></ul> |

  | Checkr-hosted candidate experience | <ul><li>Easy to implement and get
  up-and-running</li><li>Checkr hosts and maintains compliance
  language</li></ul> | <ul><li>Less control over user experience</li><li>Less
  flexibility around API-specific automated workflows</li></ul> |

  | Checkr Dashboard experience | <ul><li>No developer investment needed to get
  up-and-running</li></ul> | <ul><li>Least control over user
  experience</li><li>Least amount of flexibility around automated
  workflows</li></ul>  |


  ### The customer-hosted candidate experience


  The customer-hosted candidate experience enables Checkr customers to
  completely control the user onboarding experience, from the look and feel of
  the candidate's UX, to the specific API calls made during the process, to the
  flexibility in timing and ordering of those calls. Some unique Checkr
  functionality, like programmatic report upgrades, are also available only to
  those customers hosting their own candidate experience.


  While hosting your own candidate onboarding experience takes more developer
  time, it might not be as much time as you think. We've seen teams successfully
  deploy a new background check and onboarding flow in a single 2-week
  development sprint.


  **Building your candidate experience**


  To help customers meet the regulatory demands of the background screening
  industry, Checkr has defined the following UX requirements for customers
  building their own candidate onboarding experience:


  - **Collect candidate PII:** Collect candidate Personally Identifiable
  Information (PII), with additional requirements around the data captured and
  its formatting. This screen may be presented and the information collected at
  any point in the signup flow

  - **Present consumer rights summary, and collect acknowledgement:** Present a
  summary of consumer rights under the Fair Credit Reporting Act (FCRA) and
  candidate’s acknowledgement of receipt. This screen may be presented on the
  same page as the collection of PII.

  - **Present disclosures and collect acknowledgement:** Present a disclosure
  form and candidate’s acknowledgement of receipt. This disclosure form MUST be
  on its own page with no extraneous information.

  - **Present state-specific disclosures and collect acknowledgement** (if
  necessary): Present any state-specific disclosure forms and candidate’s
  acknowledgement of receipt. For example: California requires its own
  disclosure separate from the general background check disclosure. Washington
  State DMV requires a release of liability for accessing Motor Vehicle Records
  for employment.

  - **Present authorization form and collect consent:** Present an authorization
  form and collection of consent to a background screening. Present a signature
  of authorization form, compliant with the [ESIGN
  Act](https://en.wikipedia.org/wiki/Electronic_Signatures_in_Global_and_National_Commerce_Act).


  Checkr can provide you with copy templates for each of these documents. Checkr
  routinely has these documents reviewed for general compliance and best
  practice in the industry, but you should always consult your own legal counsel
  when using templates and ensure they work for your business. Please work with
  your Checkr Account Executive or Customer Success Manager to receive Checkr’s
  set of templates. These templates, the documents they include, and other
  requirements will be explained throughout the Checkr customer account
  onboarding process.


  **Note:** Requirements differ for customers running background screening
  programs limited to running a Motor Vehicle Record (MVR) on candidates for a
  non-employment or contractor purpose. The requirements for running an MVR in
  order to provide a service such as a car or scooter rental are far less
  onerous than the requirements for other uses of the MVR, and require only one
  or two screens of necessary consent and disclosure. Please contact your Checkr
  Account Executive or Customer Success Manager if you'd like to learn more
  about these streamlined requirements.


  **Compliance and eSignature**


  Collecting proof of authorization from your candidates is one of your most
  important responsibilities before performing a background screen through
  Checkr or any other Consumer Reporting Agency. Under the FCRA, Checkr cannot
  provide you with a report unless you certify that you have obtained proper
  authorization. Maintaining proof of this process is essential in the event
  that either you or Checkr is audited, or a candidate threatens you with
  litigation.


  Checkr recommends two means of collecting and storing this eSignature during
  the consent and authorization flow:


  - Store generated PDFs
      -   Identify the candidate by username and password
      -   Have the candidate type their name in a signature box
      -   Upon submission of authorization, generate a PDF of the authorization form, including the date, time, and IP address
  - Store data to generate PDF on demand
      -   Enable on-demand generation of PDFs
      -   Identify the candidate by username and password
      -   Have the candidate type their name in signature box
      -   Upon submission of authorization, store the date, timestamp, IP address, and signed name
      -   Have the ability to reproduce a PDF copy of the authorization form on demand, including the date and timestamp, IP address, and signed name

  ### The Checkr-hosted candidate experience


  The Checkr-hosted candidate experience enables Checkr customers to easily set
  up a modern, compliant candidate background screening process in their
  onboarding flow with limited development effort. The Checkr-hosted candidate
  experience has the full set of features and functionality of the Checkr
  product, and is built on top of the Checkr API, making it an easy and powerful
  option for customers looking to begin using Checkr as quickly as possible.


  The Checkr-hosted experience can be initiated in two ways:


  **Candidate invitations triggered by API:** Customers can choose to build a
  programmatic trigger into their site or product to order reports and send
  candidates invitations to participate in the background check process. In this
  case, a customer passes Checkr a candidate email address through the API,
  which triggers an email to that address to collect the candidate's information
  and present the necessary compliance forms and disclosures (that is, your
  disclosure and authorization forms). This option requires developer time to
  build a Checkr backend integration into the customer's product, but does
  present benefits for automation and programmatic ordering.


  **Candidate invitations triggered manually:** Customers can log into the
  Checkr Dashboard and manually request that an invitation to participate in the
  background check process be sent to a candidate's email address. This option
  requires no developer time to build any Checkr integration, but lacks any
  automation or programmatic ordering, making it difficult to scale for high
  volume environments.


  Customers leveraging the Checkr Dashboard to submit a Manual Order must
  collect a candidate’s authorization and consent to a background screening
  “offline”. This means that the customer will collect the candidate’s
  Personally Identifiable Information (PII), present the necessary
  authorizations and disclosures, and collect and store necessary signatures
  through separate means. Customers must then submit that information to Checkr
  using manual keyboard entry through the Checkr Dashboard. Finally, customers
  will be presented with language certifying that proper consent was obtained
  from the candidate.


  **Note:** When using candidate invitations and the Checkr-hosted candidate
  experience, understand that Checkr is facilitating your obligations with
  regard to applicable consumer reporting laws. Before using either method of
  candidate invitations, you should fully review the template copies of
  disclosure(s) and authorization language to ensure your business needs are
  met.


  <!--#### What it looks like


  ![](images/CheckrHostedFlowEmail.gif)


  ![](images/MobileCheckrInvite.gif)-->


  ## The Checkr Dashboard


  The Checkr Dashboard allows Checkr customers to begin using the Checkr
  platform immediately and with no developer effort. The Checkr Dashboard
  includes the full feature and functionality set as the Checkr API interface,
  with a few key limitations.


  For more information, please see the [Checkr Dashboard User
  Guide](https://help.checkr.com/hc/en-us/sections/360002119753-Checkr-Dashboard-User-Guide)
  in the Checkr Help Center.


  # Getting Started


  The following sections will walk you through the steps necessary to get
  started

  running background checks with the Checkr API:


  - [Get credentialed](#section/Getting-Started/Get-credentialed)

  - [Get your API key](#section/Getting-Started/Get-your-API-key)

  - [Authenticate with
  Checkr](#section/Getting-Started/Authenticate-with-Checkr)

  - [Create a Candidate](#section/Getting-Started/Create-a-Candidate)

  - [Create a Report](#section/Getting-Started/Create-a-Report)

  - [Retrieve the Report](#section/Getting-Started/Retrieve-the-Report)

  - [Parse the results](#section/Getting-Started/Parse-the-results)


  <div class="alert alert-info">
    <b>Note: </b>Please reach out to <a href="mailto:clients@checkr.com">clients@checkr.com</a> before you start integrating with our API to learn about our approval process for production.
  </div>


  ## Get credentialed


  Before gaining access to the Checkr APIs and Dashboard, you must be properly
  credentialed to request background checks. Work with your Customer Support
  Representative to provide the required documentation, and complete the
  credentialing process.


  For more information, see [Getting
  credentialed](#section/Introduction/Get-credentialed) above.


  ## Get your API key


  Once you have access set up to log into Checkr, go to your [Developer
  Settings](https://dashboard.checkr.com/account/developer_settings) page and
  copy your Test API Key.


  Your production API key is also available on the [Developer
  Settings](https://dashboard.checkr.com/account/developer_settings) page. Note
  that your production key will not be enabled for Reports until you contact
  clients@checkr.com and request that your account be enabled for live requests.


  For more information on working with Checkr's API keys, see [Test and
  production API keys](#section/Introduction/Test-and-production-API-keys)
  above.


  ## Authenticate with Checkr


  <PullRight>


  ##### Example authentication


  ```sh

  $ curl https://api.checkr.com \
      -u YOUR_TEST_API_KEY:
  ```

  </PullRight>


  Use HTTP Basic authentication to authenticate with Checkr, with your API key
  as the username and an empty password. When using `curl`, use the `-u` option
  to specify your API key. (Note the colon following the API key in the
  examples. It tells cURL to send an empty password.)


  Note that test API requests are free and return fake data. Once you are
  production-ready, please email clients@checkr.com and we will enable live
  requests.


  ## Create a Candidate


  <PullRight>


  ##### Create a Test Candidate


  ```sh

  $ curl -X POST https://api.checkr.com/v1/candidates \
      -u [YOUR_API_KEY]: \
      -d first_name=Michael \
      -d middle_name=Gary \
      -d last_name=Scott \
      -d email=michael.scott@dundermifflin.com \
      -d phone=2035408926 \
      -d zipcode=06831 \
      -d dob=1964-03-15 \
      -d ssn=111-11-2001 \
      -d driver_license_number=981736076 \
      -d driver_license_state=CT \
      -d copy_requested=true
  ```

  </PullRight>


  Create a Candidate by passing the required PII to Checkr.


  Remember to replace `"YOUR_TEST_API_KEY"` with your actual test API key in the
  cURL example on the right.

  See [Candidates](#tag/Candidates) for more details on creating Candidates.


  **Notes:**


  - The Candidate object represents the candidate to be screened.

  - The `copy_requested` boolean captures whether or not the candidate has
  requested a copy of their background check upon completion. If `true`, Checkr
  will automatically send a copy of the background check to the passed email
  address on your behalf.

  - If using a [Checkr-hosted candidate
  experience](#section/Introduction/The-Checkr-hosted-candidate-experience), the
  only strictly required parameter for creating a Candidate in Checkr is
  `email`.

  - If using a [customer-hosted
  flow](#section/Introduction/The-customer-hosted-candidate-experience), the
  required attributes include `first_name`, `middle_name` or `no_middle_name`,
  `last_name`, and `dob`.

  - If the Report's package includes any criminal check, `ssn` and `zipcode` are
  required attributes.

  - If requesting a Motor Vehicle Report, Checkr requires
  `driver_license_number` and `driver_license_state`.

  - Other Candidate-specific parameters are defined in the [Candidate
  resource](#operation/createCandidate) below.


  ### Candidate creation response


  <PullRight>


  ##### Test Candidate creation response


  ```json

  {
    "id":"551564b7865af96a28b13f36",
    "object":"candidate",
    "uri":"/v1/candidates/551564b7865af96a28b13f36",
    "created_at":"2018-08-17T01:08:18Z",
    "first_name":"Michael",
    "last_name":"Scott",
    "middle_name":"Gary",
    "mother_maiden_name":null,
    "dob":"1964-03-15",
    "ssn":"XXX-XX-2001",
    "email":"michael.scott@dundermifflin.com",
    "zipcode":"06831",
    "phone":"2035408926",
    "driver_license_state":"CT",
    "driver_license_number":"981736076",
    "copy_requested":true,
    "previous_driver_license_state":null,
    "previous_driver_license_number":null,
    "adjudication":null,
    "custom_id":null,
    "no_middle_name":false,
    "report_ids":[],
    "geo_ids":[]
  }

  ```

  </PullRight>


  Checkr responds immediately with the resulting Candidate object, which
  includes the ID of the Candidate and a URI that points to the new Candidate
  object. Store the ID for this new Candidate object, which you'll need when
  creating a Report in the next step.


  <!--<RedocResponse pointer={"#/components/responses/CandidateCreated"} />-->


  ## Create a Report


  <PullRight>


  ##### Create a Test Report


  ```sh

  $ curl -X POST https://api.checkr.com/v1/reports \
      -u [YOUR_API_KEY]: \
      -d package=dunder_mifflin_executive \
      -d candidate_id=551564b7865af96a28b13f36
  ```

  </PullRight>


  Next, create a Report for the Candidate created in the previous step. Use your
  test API key and Candidate ID in the cURL command shown to the right.


  **Notes:**

   - The Report object represents a background check report.
   - Depending on the selected Package, a Report may include any number of requested Screenings.
   - Validation for inclusion of Candidate attributes (such as driver license number or SSN) is performed when the customer requests a Report.
   - Information requirements depend strictly on the Package requested. (For more information, see [Packages](#tag/Packages), below.)
   - This object includes your certification to Checkr that appropriate disclosures and authorization (such as consent) have been obtained from your candidate.

  ### Report Creation response


  <PullRight>


  ##### Test Report creation response


  ```json

  {
    "id": "a13f4827d8711ddc75abc56ct",
    "object": "test_report",
    "uri": "/v1/reports/a13f4827d8711ddc75abc56ct",
    "status": "pending",
    "created_at": "2018-08-17T01:10:21Z",
    "completed_at": null,
    "revised_at": null,
    "upgraded_at": null,
    "turnaround_time": null,
    "package": "dunder_mifflin_executive",
    "tags": [],
    "adjudication": null,
    "assessment": null,
    "candidate_id": "551564b7865af96a28b13f36",
    "county_criminal_search_ids": null,
    "document_ids": [
      "865de4344ac6d05209c83ef5"
    ],
    "federal_criminal_search_id": "5b64c62b67abb4002d3ec763",
    "global_watchlist_search_id": "5b64c5cf67abb400353ec6f7",
    "national_criminal_search_id": "5b64c5cf67abb400353ec6f5",
    "personal_reference_verification_ids": [],
    "professional_reference_verification_ids": [],
    "sex_offender_search_id": "5b64c5cf67abb400353ec6f6",
    "ssn_trace_id": "5b64c5cf67abb400353ec6f3",
    "state_criminal_search_ids": [],
    "terrorist_watchlist_search_id": "5b64c5cf67abb400353ec6f7",
    "facis_search_id": null,
    "arrest_search_id": null,
    "motor_vehicle_report_id": null
  }

  ```

  </PullRight>


  Checkr responds immediately with the full Report object, which includes the ID
  of the Report and a URI that points to the new Report object.


  Store the resulting Report ID and any of the requested Screening IDs. The ID
  for this new Report object is required to retrieve the Report. (Checkr will
  return IDs for all Screenings included in the requested Package. All other
  Screening IDs will be returned `null`.)


  ## Listen for webhooks


  <PullRight>


  ##### Test webhook response


  ```json

  {
    "id": "507f1f77bcf86cd799439011",
    "object": "event",
    "type": "report.completed",
    "created_at": "2014-01-18T12:34:00Z",
    "data": {
      "object": {
        "id": "4722c07dd9a10c3985ae432a",
        "object": "report",
        "uri": "/v1/reports/532e71cfe88a1d4e8d00000d",
        "created_at": "2014-01-18T12:34:00Z",
        "received_at": "2014-01-18T12:34:00Z",
        "status": "clear",
        "package": "driver_pro",
        "source": "api",
        "candidate_id": "e44aa283528e6fde7d542194",
        "ssn_trace_id": "539fd88c101897f7cd000001",
        "sex_offender_search_id": "539fd88c101897f7cd000008",
        "national_criminal_search_id": "539fd88c101897f7cd000006",
        "county_criminal_search_ids": [
          "539fdcf335644a0ef4000001",
          "532e71cfe88a1d4e8d00000c"
        ],
        "state_criminal_search_ids": [
          "539fdcf335644a0ef4000003",
          "532e71cfe88a1d4e8d000004"
        ],
        "motor_vehicle_report_id": "539fd88c101897f7cd000007"
      }
    },
    "account_id": "8e122cc56b8fa82d33c6118a"
  }

  ```

  </PullRight>


  If webhooks are enabled, Checkr pushes a status change webhook event to the
  customer account's webhook URL with the structure shown in the Test Webhook
  Response to the right.


  Use the resulting Report status (or other data elements) to execute subsequent
  workflows in your application or program.


  ## Retrieve a Report


  <PullRight>


  ##### Retrieve a Report


  ```sh

  $ curl -X GET https://api.checkr.com/v1/reports/a13f4827d8711ddc75abc56ct

  ```

  </PullRight>


  Retrieve the results of a report by performing a GET request to the specific
  URL of the report. For example, executing the command to the right retrieves
  the Report object below it.


  Retrieve the Report created in the previous step by using your test API key
  and Report ID into the cURL command shown to the right.


  ### Retrieve Report response


  <PullRight>


  ##### Retrieve Report response


  ```JSON

  {
    "id": "a13f4827d8711ddc75abc56ct",
    "object": "report",
    "uri": "/v1/reports/a13f4827d8711ddc75abc56ct",
    "status": "clear",
    "created_at": "2018-08-17T01:10:21Z",
    "completed_at": "2018-08-17T01:12:26Z",
    "revised_at": null,
    "upgraded_at": null,
    "turnaround_time": 52,
    "package": "dunder_mifflin_executive",
    "tags": [],
    "adjudication": null,
    "assessment": null,
    "source": "api",
    "candidate_id": "551564b7865af96a28b13f36",
    "county_criminal_search_ids": [],
    "municipal_criminal_search_ids": [],
    "document_ids": [],
    "federal_criminal_search_id": "5b64c62b67abb4002d3ec763",
    "global_watchlist_search_id": "5b64c5cf67abb400353ec6f7",
    "national_criminal_search_id": "5b64c5cf67abb400353ec6f5",
    "personal_reference_verification_ids": [],
    "professional_reference_verification_ids": [],
    "sex_offender_search_id": "5b64c5cf67abb400353ec6f6",
    "ssn_trace_id": "5b64c5cf67abb400353ec6f3",
    "state_criminal_search_ids": [],
    "terrorist_watchlist_search_id": "5b64c5cf67abb400353ec6f7",
    "facis_search_id": null,
    "arrest_search_id": null,
    "motor_vehicle_report_id": null,
    "self_disclosure_ids": []
  }

  ```

  </PullRight>


  Note that the Report is now a full Report with a status of `clear`, indicating
  that no violations or criminal background have come up for this Report. See
  [Testing Checkr's functions and
  features](#section/The-Checkr-test-environment/Using-the-test-environment) for
  more information about test Social Security Numbers and Driver License
  numbers.


  See [Embedding Resources](#section/Reference/Embedding-Resources) if you wish
  to embed the full contents of individual screenings (SSN Trace, Sex Offender
  Registry Search, Global Watchlist Search) in the server response. You can also
  retrieve those resources using the IDs provided in the server response.


  ## Parse the results


  Webhook responses and completed Reports both contain the same information
  about the results of a criminal screening: the `status` of the report which
  can be `clear` or `consider`, and the assessment of the report, which can be
  `null`, `fail`, or `pass`.


  A `clear` report can be interpreted as that report having no items listed on
  the candidate's record that must be reviewed. A report with an assessment of
  `consider` indicates that there are items on the candidate's record that
  require consideration. In maintaining a compliant process as per FCRA
  legislation and EEOC guidelines, Checkr does not make this determination on
  our customers' behalf.


  A report contains an `assessment` if the account has an active [Positive
  Adjudication
  Matrix](https://help.checkr.com/hc/en-us/articles/115011594707-Positive-Adjudication-Matrix-Reduce-bias-and-increase-efficiency)
  (PAM) and the report was returned with records. If the records are filtered by
  the adjudication criteria defined by the user in PAM, the `assessment` is
  returned as `pass`; if not, it is returned as `fail`. If the report had no
  records, the `assessment` is returned as `null`.


  # Test Environment


  Checkr supports a sandbox or test environment for developers to build with the
  Checkr API before beginning to run live production reports with real candidate
  PII. Test API calls are free, and will return fake data. Use the sandbox to
  start work on building your Checkr integration before incurring costs for
  running actual background checks.


  ## Using the test environment


  By default, Checkr customers are provided test API keys when their account is
  created. Test keys can be used to access all test environment functionality,
  and can be found in the Checkr Dashboard under **Account Settings > Developer
  Settings**.


  Test API requests are **free** and return **fake data**.


  Customers can also work with Checkr's webhooks feature in the test
  environment. While in the test environment in the Dashboard, a customer can
  navigate to **Account Settings > Developer Settings** and enter a URL and
  designate it as Test under the **Account Webhooks** section of the page. In
  this same section, a customer can designate which specific webhook
  notifications one wishes to receive from Checkr.


  ![](images/AccountWebhooksPage.png)


  ### Testing Checkr's functions and features


  To facilitate building with the Checkr API, our test environment supports a
  number of test candidate profiles that always return a predictable result.
  **Please note that if you pass different candidate identifiers when using a
  test SSN, screenings will remain in a pending state indefinitely.**


  These candidates will be included in your account when the account is created.
  Candidate names and other PII for these SSNs will differ by account. The SSNs
  are consistent across all Checkr accounts. The listed driver license numbers
  may be associated with any of the three test SSNs.


  **Test SSNs**


  - Test SSNs affect the SSN trace and all criminal screenings.

  - SSN 111-11-2001 returns a criminal screening with status `clear`.

  - SSN 111-11-2002 returns a criminal screening with status `consider`.

  - SSN 111-11-2010 returns a criminal screening with status `pending`.


  **Test driver licenses**


  - Test driver licenses affect only the Motor Vehicle Report.

  - CA driver license with number F1112001 returns an MVR with status `clear`.

  - CA driver license with number F1112002 returns an MVR with status
  `consider`.


  The test environment's API calls, responses, and webhooks follow the same
  pattern and response structure as those of the production environment.


  If your test use case requires the testing of additional statuses, reports, or
  states, please reach out to your Checkr Account Executive or Customer Success
  Manager to speak with a Solutions Consultant or Solutions Architect.


  ## Uses and limitations of the test environment


  The test environment is built to mimic the production environment and allow
  developers to build without running production background screenings and
  incurring a charge. There are a few key differences between the behavior of
  the test and production environments:


  - Testing of the Checkr invitation flow is limited in the test environment.
  Test accounts will not trigger automatic email invitations from the Checkr
  server to the test candidate's email address. However, creating a test
  invitation will still generate an invitation URL, passed back as
  `invitation_url` in the payload response of a `POST` to `/invitations`.

  - Testing of Checkr's Adverse Action workflow is limited in the test
  environment. Generating an Adverse Action from test accounts will not trigger
  adverse notice emails from Checkr to the test candidate's email address.

  - Testing of certain Checkr Packages is limited in the test environment. For
  example, Checkr does not support the end-to-end testing of a drug screening
  report, nor does it allow the testing of a Continuous Check subscription.


  If your test use case requires the testing of additional statuses, reports, or
  states, please reach out to your Checkr Account Executive or Customer Success
  Manager to speak with a Solutions Consultant or Solutions Architect.


  # Webhooks


  <PullRight>


  ##### Generic webhook payload examples


  _`include_object` is ON_


  ```json

  {
    "id": "1002d6bca6acdfcbb8442178",
    "object": "event",
    "type": "object.event",
    "created_at": "2018-08-17T01:12:43Z",
    "webhook_url": "https://notify.company.com/checkr",
    "data": {
      "object": {
        "id": "a13f4827d8711ddc75abc56ct",
        "object": "object",
        "uri": "/v1/objects/a13f4827d8711ddc75abc56ct",
        "created_at": "2018-08-17T01:10:21Z",
        "completed_at": "2018-08-17T01:12:26Z",
        // [...] full object included
      }
    }
  }

  ```

  </PullRight>


  Use webhooks to receive updates on objects created with the API and kick off
  additional workflows based on these events. Each time an event that you
  subscribed to occurs, Checkr submits a POST request to the designated webhook
  URL with information about the event. When the `include_object` option is ON,
  it also includes the related object.


  The User-Agent for the requests will have the prefix `Checkr-Webhook/`.


  To receive webhooks, use the Checkr Dashboard to configure a Webhook URL in
  the [Developer
  Settings](https://dashboard.checkr.com/account/developer_settings). For more
  information about setting up webhooks, see the [Account Settings
  article](https://help.checkr.com/hc/en-us/articles/360010450474-Account-Settings#developer)
  in the Checkr Help Center.


  ## Attributes


  <PullRight>


  _`include_object` is OFF_



  ```json

  {
    "id": "1002d6bca6acdfcbb8442178",
    "object": "event",
    "type": "object.event",
    "created_at": "2018-08-17T01:12:43Z",
    "webhook_url": "https://notify.company.com/checkr",
    "data": {
      "object": {
        "id": "a13f4827d8711ddc75abc56ct",
        "object": "object",
        "uri": "/v1/objects/a13f4827d8711ddc75abc56ct"
      }
    }
  }

  ```

  </PullRight>


  | Parameter | Type | Description |

  |-----------|------|-------------|

  | `id` | string | ID of the event. |

  | `object` | string | Defines the object type: `event`. |

  | `type` | string | The type of event. Values include: `candidate.created`,
  `report.completed`. |

  | `created_at` | timestamp iso 8601 format | Timestamp for the event. |

  | `webhook_url` | string | Webhook URL. |

  | `data` | hash | Object associated with the event. |

  | `include_object` | boolean | Should the related object be attached to
  webhook payload. |


  ## Supported webhook URLs


  | Type | Format | Description |

  |------|--------|-------------|

  | `HTTP` / `HTTPS` |
  `http(s)://(<user>:<password>@)<hostname>/<path>`<br>E.g.:
  `https://notify.company.com/checkr` | **Notes:** The endpoint to be reached
  must be public.<br>HTTP can be  used only in a Test environment. Live
  environment webhooks must be HTTPS.<br>Basic Auth is supported by adding
  `username:password@` in front of the hostname, credentials must be URL
  escaped. |

  | `SNS` |
  `sns://<key_id>:<access_key>@<region>/<topic_owner>/<topic_name>`<br>E.g.:
  `sns://AKI95AMUAD5K:a2n66fVKX7%2BYJKid3@us-east-1/12048/checkr` | AWS Simple
  Notification System (SNS)<br>**Notes:** Access Key must have <b>only </b>the
  Publish to SNS right in IAM.<br>Credentials must be URL escaped. |


  ## Responding to webhooks


  Your endpoint should respond to webhooks as quickly as possible. To
  acknowledge receipt of a webhook, your endpoint must return a `2xx` HTTP
  status code. This status code should only indicate receipt of the message, not
  acknowledgment that it was successfully processed by your system. Any other
  information returned in the response headers or response body is ignored.


  If a webhook is not successfully received for any reason, Checkr will continue
  trying to send it every minute for 10 minutes, then every hour for 24 hours.
  Webhooks failing for more than 7 consecutive days are automatically deleted.


  Webhook logs can be found on the dashboard:
  https://dashboard.checkr.com/webhook_logs


  ## Securing webhooks


  For greater security, verify that the requests you receive come from Checkr.


  We pass along a hash signature with each request in the header
  X-Checkr-Signature. The hash signature is generated with the HMAC algorithm,
  using your API key as a key and SHA256 digest mode. When you receive a
  request, you can compute a hash and ensure that the one from Checkr matches.


  **Note:** Accounts without an API key will have X-Checkr-Signature set to
  "Please create an API key to check the authenticity of our webhooks."


  **Example hash signature computation:**

    `echo -n "${request_body}" | openssl dgst -sha256 -hmac "${api_key}"`

  ## Guarding against duplicate and missed report notifications


  While webhooks are helpful for updates, they are not foolproof. In some cases,
  report updates can be sent in rapid succession based on multiple events within
  the Checkr environment, and may be "mis-heard". For robust webhook handling,
  we recommend that you account for the following:


  - Duplicate reports (idempotency)

  - Webhook misses


  As a best practice, Checkr recommends that you build a safety net to account
  for duplicate reports. One option might be to build in a function ahead of the
  status tracker, which copies only one `report.completed` update per Candidate
  or Report. This works well with an additional time threshold assigned. (For
  example, a report is only considered a duplicate if it's within 60 minutes of
  a previous iteration of that report.)


  To address missed webhook updates, you may also consider adding a function to
  send an alert if no `report.completed` update is sent within a certain number
  of days.


  ## Candidate events


  <PullRight>


  ##### Example Candidate event webhook payload


  ```json

  {
    "id": "58f8e550d991bb000db04005",
    "object": "event",
    "type": "candidate.created",
    "created_at": "2017-04-20T16:44:00Z",
    "webhook_url": "https://yourcompany.com/checkr/incoming",
    "data": {
      "object": {
        "id": "c373384e71a9a02098cb7421",
        "object": "candidate",
        "uri": "/v1/candidates/e44aa283528e6fde7d542194",
        "created_at": "2017-04-18T18:37:34Z",
        "first_name": "John",
        "last_name": "Smith",
        "middle_name": "Alfred",
        "mother_maiden_name": null,
        "dob": "1990-10-31",
        "ssn": "XXX-XX-1111",
        "email": "john.smith@example.org",
        "zipcode": "48071",
        "phone": "5555555555",
        "driver_license_state": "CA",
        "driver_license_number": "F111111",
        "copy_requested": true,
        "previous_driver_license_state": null,
        "previous_driver_license_number": null,
        "adjudication": "engaged",
        "custom_id": null,
        "no_middle_name": false,
        "report_ids": [
          "4722c07dd9a10c3985ae432a"
        ],
        "geo_ids": []
      }
    }
  }

  ```

  </PullRight>


  | Event | Description |

  |-------|-------------|

  | `candidate.created` | A new Candidate has been created. |

  | `candidate.id_required` | An exception has been raised requiring a copy of
  the Candidate's identification. |

  | `candidate.driver_license_required` | An exception has been raised requiring
  a copy of the Candidate's driver license. |

  | `candidate.updated` | A Candidate has been updated. |

  | `candidate.pre_adverse_action` | An Adverse Action has been initiated on the
  Candidate. |

  | `candidate.post_adverse_action` | An Adverse Action has been completed on
  the Candidate. |


  ## Invitation events


  <PullRight>


  ##### Example Invitation event webhook payload


  ```json

  {
    "id": "1002d6bca6acdfcbb8442178",
    "object": "event",
    "type": "invitation.expired",
    "created_at": "2017-04-20T16:44:00Z",
    "webhook_url": "https://yourcompany.com/checkr/incoming",
    "data": {
      "object": {
        "id": "16241770f7f7be1c57c85176",
        "status": "expired",
        "uri": "/v1/invitations/16241770f7f7be1c57c85176",
        "invitation_url": "https://apply.checkr.com/invite/yourcompany/7499b8c558a6",
        "completed_at": null,
        "deleted_at": null,
        "expires_at": "2017-05-21T17:45:34Z",
        "package": "tasker_pro",
        "object": "invitation",
        "created_at": "2017-05-14T17:45:34Z",
        "candidate_id": "fcb0084f6cb2423c069a35b3",
        "report_id": null
      }
    }
  }

  ```

  </PullRight>


  | Event | Description |

  |-------|-------------|

  | `invitation.created` | An Invitation has been created. |

  | `invitation.completed` | An Invitation has been completed. |

  | `invitation.expired` | An Invitation has expired. |

  | `invitation.deleted` | An Invitation has been canceled. |


  ## Verification events


  <PullRight>


  ##### Example Verification event webhook payload


  ```json

  {
    "id": "id",
    "object": "event",
    "type": "verification.processed",
    "created_at": "2018-07-12T00:06:40Z",
    "data": {
      "object": {
        "id": "verification_id",
        "object": "verification",
        "uri": "/v1/reports/report_id/verifications/verification_id",
        "created_at": "2018-07-12T00:06:39Z",
        "completed_at": "2018-07-12T00:17:02Z",
        "processed_at": "2018-07-12T00:17:04Z",
        "verification_type": "ssn_confirmation",
        "verification_url": "https://verifications.checkr.com/verifications/verification_id",
        "report_id": "report_id"
      }
    },
    "account_id": "account_id"
  }

  ```

  </PullRight>


  Verification events are issued during the
  [Exception](https://help.checkr.com/hc/en-us/articles/217114247-Exceptions-Addressing-data-discrepancies-in-reports)
  process when a candidate is issued or has responded to a request to verify
  submitted PII.


  **Note:** When verifications are automatically processed, and do not require
  manual input, the `verification.processed` webhook is sent immediately after
  the `verification.completed` webhook. These two webhooks may not arrive “in
  order”.


  | Event | Description |

  |-------|-------------|

  | `verification.created` | A verification is created and a request to upload a
  document or enter the data is forwarded to the candidate. |

  | `verification.completed` | A document is uploaded or data is entered by the
  candidate. |

  | `verification.processed` | The data gathered by the verification is
  processed manually or automatically and a decision is made for the
  continuation of the background check. |


  ## Report events


  <PullRight>


  ##### Example Report event webhook payload


  ```json

  {
    "id": "507f1f77bcf86cd799439011",
    "object": "event",
    "type": "report.completed",
    "created_at": "2014-01-18T12:34:00Z",
    "webhook_url": "https://yourcompany.com/checkr/incoming",
    "data": {
      "object": {
        "id": "4722c07dd9a10c3985ae432a",
        "object": "report",
        "uri": "/v1/reports/532e71cfe88a1d4e8d00000d",
        "created_at": "2014-01-18T12:34:00Z",
        "received_at": "2014-01-18T12:34:00Z",
        "status": "clear",
        "package": "driver_pro",
        "candidate_id": "e44aa283528e6fde7d542194",
        "ssn_trace_id": "539fd88c101897f7cd000001",
        "sex_offender_search_id": "539fd88c101897f7cd000008",
        "national_criminal_search_id": "539fd88c101897f7cd000006",
        "county_criminal_search_ids": [
          "539fdcf335644a0ef4000001",
          "532e71cfe88a1d4e8d00000c"
        ],
        "state_criminal_search_ids": [
          "539fdcf335644a0ef4000003",
          "532e71cfe88a1d4e8d000004"
        ],
        "motor_vehicle_report_id": "539fd88c101897f7cd000007"
      }
    }
  }

  ```

  </PullRight>


  | Event | Description |

  |-------|-------------|

  | `report.created` | A new Report has been created. <br>Status: `pending` |

  | `report.updated` | A Report has been updated while the background check is
  run. This event is triggered on select update events, which include:
  <ul><li>Report Estimated Completion Time changed</li><li>Drug Screening update
  status event created</li></ul>Status: `pending` |

  | `report.upgraded` | A Report has been upgraded. Upgrades can be triggered
  either from an API call or from the Dashboard ("Upgrade" button). This is
  useful if you want to run a package (such as an MVR) and then upgrade it on
  completion (for example: add a County Criminal Search). <br>Status: `pending`
  |

  | `report.completed` | A Report has been completed. <br>Status: `clear`,
  `consider` |

  | `report.suspended` | A Report has been suspended. Checkr is waiting for the
  candidate to provide additional documentation. <br>Status: `suspended` |

  | `report.resumed` | A Report has resumed. (The candidate has provided
  documentation to a previously "suspended" Report.) <br>Status: `pending` |

  | `report.assessed` | A report has been assessed. <br>Status: `clear`,
  `consider` |

  | `report.disputed` | A Report has been disputed by a candidate. Once a
  dispute has been completed, Checkr will trigger the `report.completed` webhook
  again with the appropriate Report status. <br>Status: `dispute` |

  | `report.pre_adverse_action` | The Pre-Adverse Action notice has been sent to
  the candidate of that report. <br>Status: `consider` |

  | `report.post_adverse_action` | The Post-Adverse Action notice has been sent
  to the candidate of that report. <br>Status: `consider` |

  | `report.engaged` | A Report has been adjudicated as "engaged". Use this
  event to track either all candidates you have officially engaged, or simply
  those candidates with a "consider" background check report that you have
  engaged. This can be triggered either from an API call or from the dashboard
  ("Engage" button). <br>Status: `pending`, `clear`, `consider`, `suspended` |


  ## Adverse Action events


  <PullRight>


  ##### Example Adverse Action event webhook payload


  ```json

  {
    "id": "5c4fee84d5abd60049eaa4fe",
    "object": "event",
    "type": "adverse_action.notice_not_delivered",
    "created_at": "2019-01-29T06:11:16Z",
    "data": {
      "object": {
        "id": "5c4f46eb805e59e228baacdd",
        "object": "adverse_action",
        "uri": "/v1/adverse_actions/5c4f46eb805e59e228baacdd",
        "status": "pending",
        "created_at": "2019-01-28T18:16:11Z",
        "canceled_at": null,
        "post_notice_scheduled_at": null,
        "post_notice_ready_at": "2019-02-04T18:16:11Z",
        "delivery": {
          "state": "error",
          "updated_at": "2019-01-29T06:11:15Z",
          "reason": "No MX for bad-email-domain-client.com"
        },
        "individualized_assessment_engaged": false,
        "report_id": "report_id",
        "adverse_items": [
          {
            "id": "62532b9f6dd2279acc5eb3574bad5bc085892ecc",
            "object": "adverse_item",
            "text": "** ACCIDENT **"
          },
          {
            "id": "418759b62961971c0ce8d7a6858b6c6f457400d5",
            "object": "adverse_item",
            "text": "** ACCIDENT **"
          },
          {
            "id": "e911042a437d735bbcbb6a98ab500bc62fc2b88e",
            "object": "adverse_item",
            "text": "FAILURE TO WEAR SEAT BELT"
          },
          {
            "id": "09d83492f6a15b41e3e5c48a970df3a4f53e660c",
            "object": "adverse_item",
            "text": "OBSTRUCTING PASSAGE OF OTHER VEHIC"
          }
        ]
      }
    },
    "account_id": "account_id"
  }

  ```

  </PullRight>


  | Event | Description |

  |-------|-------------|

  | `adverse_action.notice_not_delivered` | The Adverse Action notice is
  confirmed to be undeliverable to the candidate of that report. User action is
  required. |


  ## Package events


  <PullRight>


  ##### Example Package event webhook payload


  ```json

  {
    "id": "1002d6bca6acdfcbb8442178",
    "object": "event",
    "type": "package.created",
    "created_at": "2017-04-20T16:44:00Z",
    "webhook_url": "https://yourcompany.com/checkr/incoming",
    "data": {
      "object": {
        "id": "e44aa283528e6fde7d542194",
        "object": "package",
        "uri": "/v1/packages/e44aa283528e6fde7d542194",
        "created_at": "2014-01-18T12:34:00Z",
        "deleted_at": null,
        "name": "Driver Pro",
        "slug": "driver_pro",
        "price": 6500,
        "screenings": [
          {
            "type": "ssn_trace",
            "subtype": null
          },
          {
            "type": "county_criminal_search",
            "subtype": "7years"
          },
          {
            "type": "national_criminal_search",
            "subtype": "standard"
          },
          {
            "type": "sex_offender_search",
            "subtype": null
          },
          {
            "type": "global_watchlist_search",
            "subtype": null
          },
          {
            "type": "motor_vehicle_report",
            "subtype": null
          }
        ]
      }
    }
  }

  ```

  </PullRight>


  | Event | Description |

  |-------|-------------|

  | `package.created` | A Package has been created. |

  | `package.updated` | A Package has been updated. |

  | `package.deleted` | A Package has been deleted. |


  # Checkr Partners


  Checkr partners with leading Staffing, On-Demand, Applicant Tracking Systems,
  and HR Systems to bring background checks to your customers. As a Checkr
  Partner, you can leverage the Checkr API to seamlessly connect your customers'
  Checkr accounts and integrate the background check process into your
  applications. Checkr's self-serve sign-up flow is fast, easy, and allows your
  customers to start running background checks within minutes after their
  account is credentialed. If you are interested in partnering with Checkr,
  submit this <a
  href="https://docs.google.com/forms/d/e/1FAIpQLScnuVG2FjxSOnCtKXiabSGwTVEEOwc0mhCU2m1eLgvj2RwBZw/viewform"
  target="_blank">Checkr Partner Application form</a> to connect with our
  Business Development team.


  ## Checkr Partner Developer Guide


  Checkr also provides a Partner Developer integrations best practices guide.
  This document includes detailed programming guides designed to enable you
  quickly integrate with Checkr, and allow your customers to use Checkr
  functionality from within your app.


  This document describes how to:

  * Connect to Checkr

  * Select packages

  * Request background checks

  * Display results

  * Adjudicate results

  * Respond to Webhooks


  Follow the instructions below to set up your account integration, then
  download and use this <a
  href="images/Checkr-Partner-Integration-Best-Practices.pdf"
  target="_blank">Checkr API Partner Developer Guide</a> to build a background
  check workflow that serves both your and your customers' needs.


  ## Set up your account


  Once approved to become a Checkr Partner, your Checkr Partner Manager will ask
  you to provide the following information:


  | Field | Description | Example |

  |-------|-------------|---------|

  | `name`| Your application's name or brand. | Partner Inc. |

  |`description`| A short description of your application. | Partner Inc. is the
  next-generation ATS to revolutionize your talent acquisition funnel. |

  |`url`| Your application's URL. | https://partnerinc.com |

  |`redirect_uri` | A page in your application to which your customers will be
  redirected after connecting, or failing to connect, their Checkr account. This
  URL must be HTTPS. | https://partnerinc.com/checkr/callback |

  |`webhook_url` | An endpoint to which webhooks will be transmitted. |
  https://partnerinc.com/webhooks/checkr |

  |`logo_url`| A URL or a file of your application's logo or brand. This image
  will appear in the Checkr onboarding flow. Square logos are preferred, like
  the kind found on Twitter or Facebook profiles. |
  https://partnerinc.com/assets/logo.png |


  Once your account is provisioned, Checkr will provide you with the following
  information for both live and [test](#section/Test-Environment) environments:


  - `client_id`: a unique identifier for your application, generated by Checkr.

  - `client_secret`: a unique secret for your application, generated by Checkr.



  <div class="alert alert-info">
    <b>Note: </b>The client_secret should stay secret and be stored securely in your application.
  </div>


  ## Understand the user flow


  Use your partner credentials to enable the Checkr onboarding flow to connect
  your application with your customers' Checkr accounts. This flow uses the
  OAuth 2.0 protocol to exchange tokens between your application and Checkr.


  1. In your application, your customer clicks a link that takes them to a
  Checkr-hosted onboarding flow specific to your application, identified by
  `client_id`.

  2. Once in this Checkr-hosted flow, your customer is prompted to authorize
  your application to access their Checkr account on their behalf by either:
      - Signing up for a new Checkr account.
      - Signing into an existing Checkr account and authorizing access.
      - Directly authorizing access if they are already signed in.
  3. The customer is then redirected back to your application using the
  configured `redirect_uri`, and Checkr returns an authorization code as the URL
  parameter `code`.

  4. Using this `code`, your application retrieves an `access_token` for the
  customer's Checkr account and stores this token in your application data
  store.

  5. If your customer's Checkr account has yet to be
  [credentialed](#section/Introduction/Get-credentialed), Checkr will initiate
  the credentialing process and send an `account.credentialed` webhook to the
  configured `webhook_url` once the process is completed.

  6. Subsequent API requests can be made on behalf of your customer's Checkr
  account by using the `access_token` [as an API
  key](#section/Getting-Started/Authenticate-with-Checkr).


  ## Enable Checkr authentication


  <PullRight>


  ##### Example partner application URL


  https://partners.checkr.com/authorize/56269e3411a549fd07ed8d92?redirect_uri=https://partnerinc.com/checkr/callback?state=123xyz



  ##### Example redirect URL


  https://partnerinc.com/checkr/callback?code=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjbGllbnRfaWQiOiJhMGNhNDlkYzM2MTZhYzE0NjhhN2VjZjYiLCJ1c2VyX2lkIjoiOWNkY2E2MjllNmMwZGRmMzRjYjEyM2ZmIiwic2NvcGUiOiJyZWFkX3dyaXRlIiwiZXhwIjoxNTYzOTE1MTk4fQ.qPdVvmjRvk7JVq16QJySh-iAtgf-4G9RR1HfFH4rl6Y?state=123xyz


  </PullRight>


  To enable your customers to authenticate with Checkr, create a button in your
  application that links to https://partners.checkr.com/authorize/{client_id}.
  Clicking this button will allow your customers to connect their existing
  Checkr account or sign up for a new Checkr account, and authorize the account
  to be linked to your application.


  You may also use the following URL parameters to pass additional information
  to secure this link and prevent CSRF attacks:


  | Name| Required?  | Description |

  | ------------- |-------------| ----- |

  | `redirect_uri` | optional | URL to redirect to upon flow completion. Must
  match the configured `redirect_uri` and must use HTTPS protocol. |

  | `state` | optional | String to be passed back as a URL parameter on
  `redirect_uri` upon flow completion. |


  After your customer completes the authorization flow, they will be redirected
  to your configured `redirect_uri` with the `code` and `state` parameters (if
  provided). If using the `state` parameter, confirm that the string is the same
  as was originally passed.


  ## Retrieve authentication tokens


  <PullRight>


  POST https://api.checkr.com/oauth/tokens


  ##### Example request


  ```sh

  $ curl -X POST https://api.checkr.com/oauth/tokens \
      -d client_id=56269e3411a549fd07ed8d92 \
      -d client_secret=179d8e7da5e70bc73239f6088012ac549924cb87 \
      -d code=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjbGllbnRfaWQiOiJhMGNhNDlkYzM2MTZhYzE0NjhhN2VjZjYiLCJ1c2VyX2lkIjoiOWNkY2E2MjllNmMwZGRmMzRjYjEyM2ZmIiwic2NvcGUiOiJyZWFkX3dyaXRlIiwiZXhwIjoxNTYzOTE1MTk4fQ.qPdVvmjRvk7JVq16QJySh-iAtgf-4G9RR1HfFH4rl6Y
  ```


  ##### Response


  ```json

  {
      "access_token": "xoxt-23984754863-2348975623103",
      "scope": "read_write",
      "checkr_account_id": "5d78dfa52ea938723b2f2ba3"
  }

  ```

  </PullRight>


  Use `POST https://api.checkr.com/oauth/tokens` to retrieve an `access_token`
  for the authorized customer.


  Use the `code` parameter included in the redirect with your `client_id` and
  `client_secret`. This is a one-time process and the `access_token` grants your
  application the right to make API calls to Checkr on behalf of the customer.


  | Name | Required? | Type | Description |

  | ------------- |-------------| -----| -----|

  | `client_id` | required | string | A unique identifier for your application,
  generated by Checkr when you [set up your
  account](#section/Checkr-Partners/Set-up-your-account). |

  | `client_secret` | required | string | A unique secret for your application,
  generated by Checkr. |

  | `code` | required | string | An authorization code used to retrieve an
  access token. This can be used only once and expires 5 minutes after creation.
  |


  <div class="alert alert-info">
    <b>Note: </b>These tokens grant account-level access to the customer's Checkr account and are valid until revoked. We recommend storing them encrypted in your application's data store.
  </div>


  ## Deauthorize tokens


  <PullRight>


  POST https://api.checkr.com/oauth/deauthorize


  ##### Example request


  ```sh

  $ curl -X POST https://api.checkr.com/oauth/deauthorize \
      -u xoxt-23984754863-2348975623103:
  ```


  ##### Response


  ```json

  {
    "access_token": "xoxt-23984754863-2348975623103"
  }

  ```


  </PullRight>


  Use `POST https://api.checkr.com/oauth/deauthorize` to deprovision a
  customer's account. Use the customer's `access_token` as the API key in the
  request.


  <div class="alert alert-info">
    <b>Note: </b>Customers may also deauthorize your application using the Checkr dashboard. Listen to the deauthorization webhook for notification of these events.
  </div>



  ## Partner application webhooks


  Checkr provides webhooks that allow you to monitor when your customers receive
  Checkr authorization, and when they deauthorize your application using the
  Checkr dashboard. Listen for these two webhooks to monitor your customers'
  status with Checkr.


  ### Customer credentialing


  <PullRight>


  ##### Example account.credentialed webhook payload


  ```json

  {
    "id": "807f1f77acf86cd799439071",
    "object": "event",
    "type": "account.credentialed",
    "created_at": "2019-01-18T12:34:00Z",
    "data": {
      "object": {
        "id": "e44aa283528e6fde7d542194",
        "object": "account",
        "adverse_action_email": "john.doe@example.com",
        "api_authorized": true,
        "authorized": true,
        "available_screenings": [
          "county_civil_search",
          "county_criminal_search",
          "municipal_criminal_search",
          "employment_verification",
          "federal_civil_search",
          "federal_criminal_search",
          "motor_vehicle_report",
          "national_criminal_search",
          "sex_offender_search",
          "ssn_trace",
          "state_criminal_search"
        ],
        "billing_email": "john.doe@example.com",
        "company": {
          "name": "Acme Corporation",
          "dba_name": "ACME",
          "street": "123 Main St",
          "city": "Wilmington",
          "state": "DE",
          "zipcode": "19801",
          "phone": "206-555-0100",
          "website": "https://example.com",
          "industry": "52-59",
          "incorporation_state": "DE",
          "incorporation_type": "llc"
        },
        "compliance_contact_email": "compliance.team@example.com",
        "created_at": "2016-09-29T17:39:49Z",
        "default_compliance_city": "San Francisco",
        "default_compliance_state": "CA",
        "geos_required": false,
        "name": "Acme Corp",
        "purpose": "employment",
        "support_email": "support@example.com",
        "support_phone": "206-555-0188",
        "technical_contact_email": "jane.smith@example.com",
        "uri": "/v1/accounts/e44aa283528e6fde7d542194",
        "uri_name": "acme-corp"
      }
    },
    "account_id": "e44aa283528e6fde7d542194"
  }

  ```


  </PullRight>


  New accounts must be [credentialed](#section/Introduction/Get-credentialed) by
  our

  Customer Success team before they will be allowed to request background
  checks.


  Once the credentialing process is complete, Checkr will issue an
  `account.credentialed` webhook to the `webhook_url` configured during partner
  application setup. We will also notify your customer by email.


  If your customer's Checkr account is already credentialed, the
  `account.credentialed`

  webhook will be issued immediately after the authorization flow is completed.


  <hr style="clear:right; border-width:0">


  ### Customer deauthorization


  <PullRight>


  ##### Example token.deauthorized webhook payload


  ```json

  {
    "id": "5612db68303137000a311000",
    "object": "event",
    "type": "token.deauthorized",
    "created_at": "2019-01-05T20:19:52Z",
    "data": {
      "object": {
        "access_code": "xoxt-23984754863-2348975623103"
      }
    }
  }

  ```


  </PullRight>


  You are able to deprovision your customer's account by calling the
  deauthorization endpoint directly with the customer's `access_token` as an API
  key. Customers may also deauthorize your application using the Checkr
  dashboard. Checkr will issue a `token.deauthorized` webhook to the
  `webhook_url` configured during partner application setup.



  # Advanced Features


  The robust Checkr API offers significant flexibility and opportunity for
  developers to build a unique background screening program tailored to their
  product or business needs. This section describes additional features and
  capabilities that our customers find valuable.


  ## Ordering Subscriptions or Continuous Check services


  In addition to offering "point-in-time" background checks, Checkr offers
  ongoing check services through our Subscription and Continuous Check products.


  A Subscription enables a customer to order the same background check on the
  same candidate on a user-defined time interval. Subscriptions can be created,
  modified, or deleted both through the Checkr Dashboard and the Checkr API.


  For more information on Subscriptions, please see [Subscriptions: Run
  recurring background
  checks](https://help.checkr.com/hc/en-us/articles/227394707-Subscriptions-Run-recurring-background-checks)
  in the Checkr Help Center. For details on using the Checkr API to order a
  Subscription on a candidate through the API, please see the
  [Subscription](#tag/Subscriptions) resource below.


  If your use case requires an ongoing tracking of a candidate's criminal
  activity, Checkr also offers a Continuous Check product. Continuous Check is a
  subscription service that runs every 30 days, and looks for changes in a
  candidate's criminal data. If Checkr identifies a change within the previous
  year, the Continuous Check service will automatically kick off follow-up
  searches in the appropriate jurisdictions in order to generate a new
  background check report.


  For more information, see [Continuous Check: The new standard of
  safety](https://help.checkr.com/hc/en-us/articles/360016337054-Continuous-Check-The-new-standard-of-safety)
  in the Checkr Help Center. For information on using the Checkr Dashboard to
  order a Continuous Check package on a candidate, see [Enroll a Candidate in
  Continuous
  Check](https://help.checkr.com/hc/en-us/articles/360010450354#enroll-continuous)
  in the Checkr Help Center. For information on using the Checkr APIs with
  Continuous Check, see the [Continuous Check
  docs](https://help.checkr.com/hc/en-us/article_attachments/360025351993/Checkr_API_Continuous_Check.pdf)
  (PDF link).


  While both Continuous Check and Subscriptions offer an ongoing cadence to
  determine a candidate's continued background status, they should not be
  interpreted as perfect substitutes for one another, as they offer different
  coverage and search methods. If you have additional questions about what makes
  the most sense for your business, please reach out to a Checkr Account
  Executive or Customer Success Manager.


  ## Upgrading a report


  Checkr also offers the ability to "upgrade" a report based on a prior set of
  screening results. The most common use case for this feature is to order a
  Package that includes both a Motor Vehicle Record (MVR) and a County Criminal
  Search. The report can be "upgraded" to run the County Criminal Search only
  after the MVR returns with a result. Checkr facilitates the following
  workflow:


  1.  Customer submits API request to Checkr for a candidate MVR

  2.  Checkr fulfills MVR, submits webhook response to customer with screening
  results

  3.  Customer determines if candidate passes or does not pass MVR requirements

  4.  If candidate passes MVR requirements:
      - Customer submits second API request for Checkr to "upgrade" the MVR report to a full criminal screening report, submitting a `POST` request to Checkr's `/reports/{id}` endpoint with the same Report ID and the new Package to request
      - Checkr conducts the criminal screening as described in [Overview of API calls and callbacks](#api-calls)
  5.  If the candidate does not pass MVR requirements:
      - Customer does not submit second API request to Checkr

  For more information on upgrading a Report, please see [Update an existing
  Report](#operation/updateReport) below.


  Please note: Only reports which include a Candidate SSN may be upgraded, and
  only within 30 days of Report creation. Attempts to upgrade a report which
  does not include an SSN will return a 400 error: "Candidate must have SSN to
  upgrade report." Requests to upgrade an older report will result in a 400
  error, "Report too old to upgrade."


  # Reference


  ## Content-Type


  <PullRight>

  ##### Example request

  ```sh

  $ curl -X POST https://api.checkr.com/v1/candidates \
      -H "Content-Type: application/json" \
      -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
      -d '{"first_name": "John", "middle_name": "Alfred", "last_name": "Smith", "email": "john.smith@gmail.com"}'
  ```

  </PullRight>

  The `Content-Type` entity header is used to describe the media type of a
  resource. In requests, a `Content-Type` header tells the server what type of
  data is being sent. In responses, it tells the client what type of data the
  returned content actually is.


  Our default is to accept data as **application/x-www-form-urlencoded** (which
  is typical for most websites you interact with), but you are free to send
  other data types, like **application/json**, as it suits you. Simply specify
  the `Content-Type` in the header of the request.


  ## Embedding Resources


  <PullRight>


  ##### Example request


  ```sh

  $ curl -X GET https://api.checkr.com/v1/reports/59b650f567e1dd0f01422b92\
      ?include=candidate,ssn_trace,county_criminal_searches \
      -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  ```

  </PullRight>

  By default, an API response contains the requested resource, and provides the
  IDs of related resources. You can also request related resources to be
  embedded in the initial response.


  The `include` parameter specifies the names of resources that should be
  embedded in the response. Resources to embed must be comma-separated.


  ## Pagination


  <PullRight>


  ##### Example paginated request


  ```sh

  $ curl -X GET https://api.checkr.com/v1/candidates?page=2&per_page=25 \
      -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  ```


  ##### Example paginated payload

  ```json

  {
    "data": [
      {
        "id": "e44aa283528e6fde7d542194",
        "object": "candidate",
        "uri": "/v1/candidates/e44aa283528e6fde7d542194",
        "created_at": "2014-01-18T12:34:00Z",
        "first_name": "John",
        "middle_name": "Alfred",
        "no_middle_name": false,
        "last_name": "Smith",
        "mother_maiden_name": null,
        "email": "john.smith@gmail.com",
        "phone": "5555555555",
        "zipcode": "90401",
        "dob": "1970-01-22",
        "ssn": "XXX-XX-4645",
        "driver_license_number": null,
        "driver_license_state": null,
        "previous_driver_license_number": null,
        "previous_driver_license_state": null,
        "copy_requested": false,
        "custom_id": null,
        "report_ids": []
      },
      {
        "id": "8b6eb2bf554ebbef7b6f885a",
        "object": "candidate",
        "uri": "/v1/candidates/8b6eb2bf554ebbef7b6f885a",
        "created_at": "2014-01-18T12:34:00Z",
        "first_name": "Michael",
        "middle_name": null,
        "no_middle_name": true,
        "last_name": "Johnson",
        "mother_maiden_name": null,
        "email": "michael.johnson@gmail.com",
        "phone": "5555555555",
        "zipcode": "94407",
        "dob": "1970-01-22",
        "ssn": "XXX-XX-8605",
        "driver_license_number": null,
        "driver_license_state": null,
        "previous_driver_license_number": null,
        "previous_driver_license_state": null,
        "copy_requested": false,
        "custom_id": null,
        "report_ids": []
      }
    ],
    "object": "list",
    "next_href": null,
    "previous_href": "http://api.checkr.com/v1/candidates?page=1&per_page=25",
    "count": 27
  }

  ```


  </PullRight>


  Pagination is enabled for endpoints that return a list of records.


  There are two parameters that control pagination: `page`, which specifies the
  page number to retrieve, and `per_page`, which indicates how many records each
  page should contain. The default value of `per_page` is 25 records.


  | Parameters      | Description      |

  | --------------- | ---------------- |

  | `page`      | **integer** <br> greater than or equal to 1 |

  | `per_page` | **integer** <br> between 0 and 100 |


  Paginated responses include the following attributes:


  | Attributes      | Description      |

  | --------------- | ---------------- |

  | `count`      | **integer** <br> the total number of items |

  | `data` | **array** <br> list of objects |

  | `next_href`      | **string** <br> URI to fetch the next page of results |

  | `object`      | **string** <br> "list" |

  | `previous_href`      | **string** <br> URI to fetch the previous page of
  results |


  ## Rate limiting


  <PullRight>


  ##### Example rate limiting request


  ```sh

  $ curl -I -X GET https://api.checkr.com/v1/reports/59b650f567e1dd0f01422b92 \
      -u 83ebeabdec09f6670863766f792ead24d61fe3f9:

  < X-Ratelimit-Limit: 600

  < X-Ratelimit-Remaining: 9

  < X-Ratelimit-Reset: 2018-02-02T16:39:00Z

  ```

  </PullRight>

  In order to provide a high-quality of service for all customers, our API is
  rate limited. The current limit is 600 requests per minute across all
  endpoints. We reserve the right to adjust the rate limit for given endpoints.


  If the rate limit is exceeded, the API responds with a `HTTP 429 "Too Many
  Requests"` status code. The response has a `X-Ratelimit-Reset` header that
  tells you when the rate limit count will reset.


  Here are the headers related to rate limiting that our API returns for any
  requests:


  | Header      | Description      |

  | ----------- | ---------------- |

  | `X-Ratelimit-Limit` | Number of requests allowed per minute |

  | `X-Ratelimit-Remaining`      | Remaining number of requests allowed for the
  current minute |

  | `X-Ratelimit-Reset`      | Time at which the rate limit count resets |


  ### Staying under the limit


  Here are some recommendations to stay under the limit:


  * Subscribe to Checkr webhooks to get updates about a report's activity
  instead of polling.

  * If you do anticipate situations where you could exceed the limit, we
  recommend using an exponential backoff and retrying the API call.


  ## Idempotency support


  <PullRight>


  ##### Example idempotent report creation request


  ```sh

  $ curl -v -X POST https://api.checkr.com/v1/reports \
    -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
    -H 'Idempotency-Key: 40b23921-c005-4ec7-832a-3ae023dbbc11' \
    -d package=driver_pro \
    -d candidate_id=be529e5d8cc5ad26e655ce89
  ```

  </PullRight>


  The Checkr API supports idempotency in POST requests. Use this feature to
  safely repeat POST requests without accidentally creating the same reports or
  candidates multiple times.


  First, provide an `Idempotency-Key: <key>` header to the POST request. This
  header value will be used server side to recognize retries of the same
  request.


  The client side must then generate a unique value for every POST request, and
  re-use the same header value in any subsequent retry attempts. We recommend
  the use of V4 UUIDs to avoid collisions.



  When serving the request with a new idempotency key, Checkr service will save
  the response (including status code, headers, body) for the first request if
  it is successful (2xx status), and return the saved response for later
  requests with the same idempotency key.


  <b>Note: </b>The idempotency key expires after 24 hours. Retries with an
  expired idempotency key will be handled as new requests.


  ## Supported characters


  The Checkr API supports alphanumeric character input, as well as accented
  characters.


  Corresponding regex character ranges: `[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ]`


  ### Supported accented characters



  ª|µ|º|À|Á|Â|Ã|Ä|Å|Æ

  :-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:

  Ç|È|É|Ê|Ë|Ì|Í|Î|Ï|Ð

  Ñ|Ò|Ó|Ô|{|Ö|Ø|Ù|Ú|Û

  Ü|Ý|Þ|ß|à|á|â|ã|ä|å

  æ|ç|è|é|ê|ë|ì|í|î|ï

  ð|ñ|ò|ó|ô|õ|ö|ø|ù|ú

  û|ü|ý|þ|ÿ| | | | |




  ## Error codes


  Checkr's API offers a number of error codes to facilitate your building and
  troubleshooting. Some common error codes include:


  | Status Code | Response |

  | ----------- | -------- |

  | 400 | SSN is invalid |

  | 400 | Zipcode is invalid |

  | 400 | First name must only contain letters, numbers, spaces, hyphens,
  apostrophes, periods, and commas |

  | 400 | Last name must only contain letters, numbers, spaces, hyphens,
  apostrophes, periods, and commas |

  | 400 | Report is too old to upgrade |

  | 400 | Candidate must have a driver license number and a driver license state
  for the package mvr |

  | 400 | Report has a pre-existing adverse action. See
  https://docs.checkr.com/#operation/updateReport |

  | 400 | SSN is invalid. TIN was provided. |

  | 400 | SSN has already been taken |

  | 400 | First name must only contain letters, numbers, spaces, hyphens,
  apostrophes, periods, and commas", "Last name must only contain letters,
  numbers, spaces, hyphens, apostrophes, periods, and commas |

  | 400 | Candidate must_not have middle name when no_middle_name flag is set to
  true for the candidate report_id= |

  | 400 | Report driver license state not supported or not enabled for account |

  | 400 | DOB invalid - Candidate must be at least 18 year old |

  | 400 | Candidate must have SSN for the package driver_premium |

  | 400 | Candidate has reached the limit of Reports allowed |

  | 400 | Middle name must only contain letters, numbers, spaces, hyphens,
  apostrophes, periods, and commas. |

  | 400 | Number Driver's license number must only contain letters, numbers,
  spaces, hyphens, and asterisks |

  | 400 | Candidate must have middle name when no_middle_name flag is set for
  the candidate report_id= |

  | 400 | Number can't be blank, State can't be blank, State is not a valid US
  state |

  | 400 | No middle name can not be updated, No middle name must have middle
  name when no_middle_name flag is set to false for the candidate candidate_id=
  |

  | 403 | Forbidden |

  | 403 | Sorry, your account is not approved for production |

  | 409 | Duplicate geo, name: peninsulasw_wa, state: WA already exists |

  | 409 | Duplicate report detected. No more than 3 reports per candidate can be
  created within a 24 hour period |

  | 409 | Duplicate candidate detected. No more than 2 duplicate candidates can
  be created within a 24 hour period |


  [dev-settings]: https://dashboard.checkr.com/account/developer_settings
version: v1
(oas-info):
  contact:
    name: Checkr
    url: 'https://checkr.com'
    email: clients@checkr.com
annotationTypes: {}
(oas-tags-definition):
  - name: Account
    description: >
      The Account resource includes account information and settings. Account
      information can be

      updated from the Dashboard. Some Account settings, like
      `available_screenings`, can be updated

      only by Checkr. Contact our Customer Success team for more information.
  - name: Candidates
    description: >
      Candidates represent people who have applied for positions within your
      company,

      and have agreed to a background check. Use the Candidate object

      to collect all Personally Identifiable Information (PII) for a candidate,

      and all relevant Checkr information, including any generated Reports, or
      attached Geos.
  - name: Schools
    description: >
      The School resource includes all relevant educational information for the
      specified Candidate.

      School resources are tied to the specified candidate, and do not transfer
      to other alumna

      within the system.
  - name: Employers
  - name: Invitations
    description: >
      Represents a background check invitation. The candidate will receive an
      email to submit

      their information.


      **Note**: By default, the date of expiration is set to 7 days after
      creation.

      All invitations expire at 11:59:59pm PDT.

      This enables candidates to have a full last day to complete their
      invitation.
  - name: Reports
    description: >
      Reports are the core of the Checkr process, and contain all information
      relevant to a

      candidate’s requested background check. Reports include the status of the
      background check

      process, the list of searches included in the check, and the Package
      requested.

      Depending on the Package selected, a report may include any combination of

      [Checkr Screenings](#tag/SSN-Trace) listed below.


      For more information on the searches listed, see
      [Screenings](#tag/SSN-Trace) (below),

      or [Screening
      Types](https://help.checkr.com/hc/en-us/sections/203637147-Screening-Types)

      in the Checkr Help Center.


      When a Report is sent to a candidate, it is generated as a PDF Report
      resource.
  - name: Packages
    description: >
      Packages are a list of screenings to be run for a report.

      Work with your Checkr Customer Success representative to define Packages
      that will best serve

      your business needs.
  - name: Documents
    description: >
      Represents a Document, either related to a Report (such as a PDF Report)
      or related to a Candidate

      (such as a Driver License image, or a consent form). Report Document IDs
      can be retrieved from the

      [Retrieve an existing Report](#operation/getReport) endpoint. Candidate
      Document IDs can be

      retrieved using the [List a Candidate's
      Documents](#operation/getCandidateDocuments) endpoint.


      Use `GET /v1/reports/{id}?include=documents` to return a Report resource
      that includes an array of `document` objects.


      Report Documents are of the following types: `drug_screen_donor_pass`,

      `health_screening_occupational_health_document`,

      `health_screening_result_certificate`, `pdf_credit_report`",

      `pdf_health_report`, `pdf_individualized_assessment`, `pdf_report`,

      `pdf_report_encrypted`, `pdf_self_disclosure`, `pdf_wisconsin_doj`, and

      `screening_pass`.
  - name: Verifications
    description: >
      Represents a link by which candidates may upload a document. If a
      candidate must upload

      documents to continue processing their report, a set of Verifications will
      be available.

      Checkr offers two verification types: `id` and `education`. ID
      Verifications are used for

      identity and license purposes, such as ID card or driver’s license.
      Education Verifications

      are used for documents related to Education Verification.
  - name: Adverse Items
    description: |
      Adverse Items are items selected from a returned report that may be used
      to initiate Adverse Action for a Candidate.
  - name: Adverse Actions
    description: >
      Adverse Actions are initiated by Checkr customers if something is returned
      on a Candidate’s

      report that requires further investigation. When an Adverse Action is
      initiated, the candidate

      must be informed, and given time to address the issues raised.


      National and local laws control the Adverse Action process and define the
      sequence and timing

      with which it must process. Please work with your legal council to ensure
      that your process is

      compliant.


      For more information, see

      [The Adverse Actions
      Process](https://help.checkr.com/hc/en-us/articles/216873808)

      in the Checkr Help Center.
  - name: Subscriptions
    description: |
      Represents a background check subscription. A background report with
      the Package specified will run at every interval.
  - name: Geos
    description: Represents a candidate geography.
  - name: Hierarchy (Enabled by request)
    description: >
      Use the Hierarchy endpoint to structure your Account as a grouping of
      individual entities

      (Nodes) that represent your business with respect to your hiring and
      background check

      needs.


      The parent-child relationship of Nodes may then be used to manage

      the relationship of your Packages and other account settings to Users and

      Candidates within your Account. Once defined, use the Checkr Dashboard to

      assign Nodes to Users, Packages, your Positive Adjudication Matrix, and

      other aspects of your Checkr Account.


      Specifying a unique ID (custom_id) for each Node in the hierarchy allows
      you

      to edit the structure of your hierarchy without dissociating any Packages,

      PAMs, or Users assigned directly to the individual nodes. As nodes are

      moved to different locations within the hierarchy they will inherit

      Packages or PAMs from their new parent that may differ from the last, but

      Packages assigned directly to the node will not change.


      For more information on Checkr's Account Hierarchy Management tools,
      please see the

      [Account Hierarchy Mangement User
      Guides](https://help.checkr.com/hc/en-us/articles/360044498554)
       in the Help Center.
  - name: Programs
    description: >
      Represents a division of an Account. Programs are typically used to
      identify clients,

      cost centers, or departments. A Program may have many Geos and may have
      many Packages.
  - name: Report Tags
    description: 'Report Tags are defined by customers, and may be used to search Reports.'
  - name: Report Addresses
    description: Represents candidate reported addresses on a Report.
  - name: Report ETA
    description: >
      Report ETAs predict when County Criminal Searches will complete for each
      background check report. This ETA provides a date for the estimated
      completion of a specific report, helping both you and candidates plan
      ahead.


      While the predictions are highly accurate, they are not a guarantee.

      Estimates provided by Report ETA are correct within one business day for

      more than 9 out of 10 requested reports. Checkr still relies on

      county-level search variability, which may contribute to unpredictable

      timelines. For more information, please see [County Criminal Record
      Search](https://help.checkr.com/hc/en-us/articles/360001686627)

      in the Checkr Help Center.


      Report ETA information will be available thirty minutes after report
      creation. Report ETA will only be provided if at least one county criminal
      records check is run for the report.
  - name: Candidate Stories
    description: >
      Candidate Stories allows candidates with records the opportunity to share
      additional context

      about themselves and their background checks. Once submitted, these
      stories will be available

      to customers in the candidate’s report in the Checkr Dashboard.


      For more information, please see

      [Candidate Stories: Improving understanding of the past and
      present](https://help.checkr.com/hc/en-us/articles/360044417414)

      in the Checkr Help Center.
  - name: SSN Trace
    description: >
      SSN Trace is typically the first screening run, and is used to verify that

      the input SSN exists, determine where and when it was issued, and to
      compile

      a list of all known aliases associated with the SSN. This Trace is also
      used to generate

      a list of all known addresses recorded by credit agencies for the SSN for
      the last 7 years.


      An SSN Trace may be used to determine which additional jurisdictions
      should be searched for

      the candidate, based on the list of known addresses returned.


      If the platform detects an issue with the SSN Trace run (data mismatch,
      absence of data,

      or inclusion of the SSN on the death master file), Checkr may issue an
      exception and ask

      the candidate to either re-enter their SSN or upload other supporting
      documentation.


      Checkr's product incorporates SSN field controls designed to not accept
      SSNs with the following characteristics:

        - SSNs without exactly 9 numeric characters
        - SSNs that start with 666 (666-34-3768)
        - SSNs that start with 9 (967-65-4325)
        - SSNs that are a single digit (111-11-1111)
        - SSNs that are sequential digits (123-45-6789)

      For more information, please see

      [SSN Trace](https://help.checkr.com/hc/en-us/articles/360001967227)

      in the Checkr Help Center.
  - name: Sex Offender Registry Search
    description: >
      Represents an instant multi-state Sex Offender Registry Search.


      A nationwide search of all 50 states' and the District of Columbia’s sex
      offender registries

      for all levels of registered sex offenders. Search includes type(s) of
      offense and

      identifiers, such as Date of Birth (DOB).


      For more information, please see

      [Sex Offender Registry
      Search](https://help.checkr.com/hc/en-us/articles/360001863428)

      in the Checkr Help Center.
  - name: Global Watchlist Search
    description: >
      The Global Watchlist Search searches known domestic and international
      terrorist watchlists

      as well as the records of the Office of Inspector General (OIG), Excluded
      Parties List (EPL)

      and additional domestic and international agency lists.


      For more information, please see

      [Global Watchlist
      Search](https://help.checkr.com/hc/en-us/articles/360001951208)

      in the Checkr Help Center.
  - name: National Criminal Search
    description: >
      Checkr conducts a National Criminal Database Search as a routine part of
      all criminal

      background checks. The search queries 3,200 counties and over 900 million
      records across

      the United States, and provides a quick means to evaluate which courts or
      jurisdictions should

      be searched more thoroughly for any given candidate.


      The National Criminal Database Search is used only as a "pointer search"
      to determine which

      courts or jurisdictions to search. Records returned from this database do
      not appear

      on the final report.


      For more information, please see

      [National Criminal Database
      Search](https://help.checkr.com/hc/en-us/articles/360001686567)

      in the Checkr Help Center.
  - name: Federal Criminal Search
    description: >
      The Federal Criminal Database Search queries the US Federal Government’s
      PACER

      (Public Access to Court Electronic Records) criminal record system, which
      is an online portal

      used to obtain case information from the 94 Federal District Court
      jurisdictions. This search

      returns results for federal crimes, which are prosecuted under federal
      criminal law in federal

      courts. (National, State, and County Criminal Searches do not return
      federal records.)


      For more information, please see

      [Federal Criminal
      Search](https://help.checkr.com/hc/en-us/articles/360001882627)

      in the Checkr Help Center.
  - name: County Criminal Search
    description: >
      County Criminal records make up the majority of criminal records, and are
      therefore one of

      the most complete sources for both felony and misdemeanor records. These
      records are

      not reported to the federal database, and will therefore not be surfaced

      in a Federal Criminal Database Search.


      The County Criminal Search resource defines the results from a criminal
      record search

      in a specific county.


      For more information, please see

      [County Criminal
      Search](https://help.checkr.com/hc/en-us/articles/360001686627)

      in the Checkr Help Center.
  - name: State Criminal Search
    description: >
      The State Criminal Search returns criminal records from a selected state’s
      database,

      the content of which varies by state. Some states include records reported
      from all counties;

      some include records only from a few. This search should be used in
      conjunction with

      a County Criminal Search, and not as a replacement for the more complete
      records returned

      from the County Search.


      For more information, please see

      [State Criminal
      Search](https://help.checkr.com/hc/en-us/articles/360001668148)

      in the Checkr Help Center.
  - name: Motor Vehicle Report
    description: >
      Motor Vehicle Records originate from a state’s Department of Motor
      Vehicles, and include

      information related to a person’s driving history, including driver’s
      license status and

      restrictions, as well as violations and convictions. Use MVR reports to
      evaluate a candidate’s

      driving history and safety record.


      Please note that some convictions, such as driving under the influence,
      may appear only

      on MVR reports, and not on criminal searches.


      For more information, please see

      [Motor Vehicle
      Records](https://help.checkr.com/hc/en-us/articles/360001568167)

      in the Checkr Help Center.
  - name: Education Verification
    description: >
      Use an Education Verification to verify a candidate’s education history,
      and highest degree

      achieved.


      For this screening, candidates are asked to supply their degree, major,
      school, and the state

      in which the school is located. Checkr then attempts to verify the
      information. After three

      failed attempts (itemized in the logs), Checkr generates an exception, and
      asks the candidate

      to upload supporting documentation. Once the document is uploaded, the
      verification process

      will begin again.


      For more information, please see

      [Education
      Verification](https://help.checkr.com/hc/en-us/articles/360001863468)

      in the Checkr Help Center.
  - name: Employment Verification
    description: >
      Use an Employment Verification to verify a candidate’s employment history
      for the last three

      employers, or the last seven years.


      For this screening, candidates are asked to supply their employment
      history. Checkr then

      attempts to verify the information. After three failed attempts (itemized
      in the logs),

      Checkr generates an exception, and asks the candidate to upload supporting
      documentation.

      Once the document is uploaded, the verification process will begin again.


      For more information, please see

      [Employment
      Verification](https://help.checkr.com/hc/en-us/articles/228391768)

      in the Checkr Help Center.
  - name: Identity Document Verification
    description: >
      Use an Identity Document Verification to verify a candidate's ID.


      For this screening, candidates are sent a link to a Checkr capture page.

      They are then asked to use this page to capture a selfie and an image of
      their ID.


      For more information, please see

      [Identity Document
      Verification](https://help.checkr.com/hc/en-us/articles/360037141854)

      in the Checkr Help Center.


      Please work with your Checkr Customer Success manager to enable this
      endpoint for your account.
protocols:
  - HTTPS
baseUri: 'https://api.checkr.com/v1'
(components):
  responses:
    Account:
      description: Account details
      schema:
        $ref: '#/definitions/Account'
    AccountHierarchy:
      description: The hierarchy for the account.
      schema:
        properties:
          nodes:
            items:
              $ref: '#/definitions/HierarchyTree'
            type: array
          sync_id:
            description: >-
              The `uri_name` of the Account, plus a randomly generated
              hexadecimal ID, linked with a hyphen.
            example: account-da78fa2cd1e6ebee4b5975aa
            type: string
          time:
            description: The date and time at which the ingestion job began.
            example: '2020-01-01T08:00:00Z'
            format: date-time
            type: string
        type: object
    AdverseAction:
      description: Adverse Action details
      schema:
        $ref: '#/definitions/AdverseAction'
    AdverseActionCanceled:
      description: Adverse Action was successfully canceled
      schema:
        $ref: '#/definitions/AdverseAction'
    AdverseActionCreated:
      description: Adverse Action was successfully created
      schema:
        $ref: '#/definitions/AdverseAction'
    AdverseItemsList:
      description: List of Adverse Items
      schema:
        properties:
          count:
            example: 1
            type: integer
          data:
            items:
              $ref: '#/definitions/AdverseItem'
            type: array
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
    BadHierarchyRequestError:
      description: Bad Request
      schema:
        $ref: '#/definitions/BadHierarchyRequestError'
    BadPiiRequestError:
      description: Bad Request
      schema:
        $ref: '#/definitions/BadPiiRequestError'
    BadRequestError:
      description: Bad Request
      schema:
        $ref: '#/definitions/BadRequestError'
    Candidate:
      description: Candidate details
      schema:
        $ref: '#/definitions/Candidate'
    CandidateCreated:
      description: Candidate was successfully created
      schema:
        $ref: '#/definitions/Candidate'
    CandidateStory:
      description: Candidate Story details
      schema:
        $ref: '#/definitions/CandidateStory'
    CandidateStoryCreated:
      description: Candidate Story was successfully created
      schema:
        $ref: '#/definitions/CandidateStory'
    CandidateStoryDeleted:
      description: Candidate Story was successfully deleted
      schema:
        $ref: '#/definitions/CandidateStory'
    CandidateUpdated:
      description: Candidate was successfully updated
      schema:
        $ref: '#/definitions/Candidate'
    CountyCriminalSearch:
      description: County Criminal Search details
      schema:
        $ref: '#/definitions/CountyCriminalSearch'
    Document:
      description: Document details
      schema:
        $ref: '#/definitions/Document'
    DocumentUploaded:
      description: Document was successfully uploaded
      schema:
        $ref: '#/definitions/Document'
    DocumentsList:
      description: List of Documents
      schema:
        properties:
          count:
            example: 1
            type: integer
          data:
            items:
              $ref: '#/definitions/Document'
            type: array
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
    DuplicateGeoError:
      description: Duplicate geo
      schema:
        $ref: '#/definitions/DuplicateGeoError'
    EducationVerification:
      description: Education Verification details
      schema:
        $ref: '#/definitions/EducationVerification'
    Employer:
      description: Employer details
      schema:
        $ref: '#/definitions/Employer'
    EmployerCreated:
      description: Employer was successfully created
      schema:
        $ref: '#/definitions/Employer'
    EmployerDeleted:
      description: Employer was successfully deleted
      schema:
        $ref: '#/definitions/Employer'
    EmployersList:
      description: List of Employers
      schema:
        properties:
          count:
            example: 2
            type: integer
          data:
            items:
              $ref: '#/definitions/Employer'
            type: array
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
    EmploymentVerification:
      description: Employment Verification details
      schema:
        $ref: '#/definitions/EmploymentVerification'
    FederalCriminalSearch:
      description: Federal Criminal Search details
      schema:
        $ref: '#/definitions/FederalCriminalSearch'
    ForbiddenError:
      description: Forbidden
      schema:
        $ref: '#/definitions/ForbiddenError'
    Geo:
      description: Geo details
      schema:
        $ref: '#/definitions/Geo'
    GeoCityUpdatedError:
      description: Geo city updated
      schema:
        $ref: '#/definitions/GeoCityUpdatedError'
    GeoCreated:
      description: Geo was successfully created
      schema:
        $ref: '#/definitions/Geo'
    GeoDeleted:
      description: Geo was successfully deleted
      schema:
        $ref: '#/definitions/Geo'
    GeoUpdated:
      description: Geo was successfully updated
      schema:
        $ref: '#/definitions/Geo'
    GeosList:
      description: List of Geos
      schema:
        properties:
          count:
            example: 1
            type: integer
          data:
            items:
              $ref: '#/definitions/Geo'
            type: array
          next_href:
            format: uri
            type: string
          object:
            description: A list
            enum:
              - list
            type: string
          previous_href:
            format: uri
            type: string
        type: object
    GlobalWatchlistSearch:
      description: Global Watchlist Search details
      schema:
        $ref: '#/definitions/GlobalWatchlistSearch'
    HierarchyNotFoundError:
      description: Not Found
      schema:
        $ref: '#/definitions/HierarchyNotFoundError'
    HierarchyStatus:
      description: The current status of hierarchy ingestion.
      schema:
        properties:
          hierarchy_pending:
            description: 'If `true`, a hierarchy ingestion request is currently processing.'
            example: false
            type: boolean
          hierarchy_present:
            description: 'If `true`, a valid hierarchy exists for the account.'
            example: true
            type: boolean
          latest_ingestion:
            properties:
              errors:
                description: >-
                  All error messages produced by the last hierarchy ingestion
                  request.
                example:
                  - 'Row 1: Validation failed: Name required'
                items:
                  type: string
                type: array
              successful:
                description: >-
                  If `true`, the last hierarchy ingestion request contained no
                  errors.
                example: false
                type: boolean
              sync_id:
                description: >-
                  The `sync_id` of the last fully-processed ingestion request.
                  `null` if no requests have processed.
                example: account-da78fa2cd1e6ebee4b5975aa
                type: string
              time:
                description: >-
                  The date and time of the start of the last fully-processed
                  ingestion request. `null` if no requests have processed.
                example: '2020-01-01T08:00:00Z'
                format: date-time
                type: string
            type: object
        type: object
    HierarchyUpdated:
      description: Ingestion successfully initiated
      schema:
        properties:
          sync_id:
            description: >-
              The `uri_name` of the Account, plus a randomly generated
              hexadecimal ID, linked with a hyphen.
            example: account-da78fa2cd1e6ebee4b5975aa
            type: string
          time:
            description: The date and time at which the ingestion job began.
            example: '2020-02-11T00:27:14Z'
            format: date-time
            type: string
        type: object
    IdentityDocumentVerification:
      description: Identity Document Verification details
      schema:
        $ref: '#/definitions/IdentityDocumentVerification'
    IngestionInProgressError:
      description: Ingestion already in progress
      schema:
        $ref: '#/definitions/IngestionInProgressError'
    Invitation:
      description: Invitation details
      schema:
        $ref: '#/definitions/Invitation'
    InvitationCanceled:
      description: Invitation was successfully canceled
      schema:
        $ref: '#/definitions/Invitation'
    InvitationCreated:
      description: Invitation was successfully created
      schema:
        $ref: '#/definitions/Invitation'
    InvitationsList:
      description: List of Invitations
      schema:
        properties:
          count:
            example: 2
            type: integer
          data:
            items:
              $ref: '#/definitions/Invitation'
            type: array
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
    ListOfAdverseActions:
      description: List of Adverse Actions
      schema:
        properties:
          data:
            items:
              $ref: '#/definitions/AdverseAction'
            type: array
          next_href:
            format: uri
            type: string
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
    ListOfCandidates:
      description: List of Candidates
      schema:
        properties:
          data:
            items:
              $ref: '#/definitions/Candidate'
            type: array
          next_href:
            format: uri
            type: string
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
    MotorVehicleReport:
      description: Motor Vehicle Report details
      schema:
        $ref: '#/definitions/MotorVehicleReport'
    NationalCriminalSearch:
      description: National Criminal Search details
      schema:
        $ref: '#/definitions/NationalCriminalSearch'
    Package:
      description: Package details
      schema:
        $ref: '#/definitions/Package'
    PackageDeleted:
      description: Package was successfully deleted
      schema:
        $ref: '#/definitions/Package'
    PackagesList:
      description: List of Packages
      schema:
        properties:
          count:
            example: 2
            type: integer
          data:
            items:
              $ref: '#/definitions/Package'
            type: array
          next_href:
            format: uri
            type: string
          object:
            description: A list
            enum:
              - list
            type: string
          previous_href:
            format: uri
            type: string
        type: object
    PreExistingAdverseActionError:
      description: Pre-existing Adverse Action
      schema:
        $ref: '#/definitions/PreExistingAdverseActionError'
    PredictionUnavailable:
      description: Unavailable
      schema:
        $ref: '#/definitions/PredictionUnavailable'
    Program:
      description: Program details
      schema:
        $ref: '#/definitions/Program'
    ProgramsList:
      description: List of Programs
      schema:
        properties:
          count:
            example: 1
            type: integer
          data:
            items:
              $ref: '#/definitions/Program'
            type: array
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
    Report:
      description: Report details
      schema:
        $ref: '#/definitions/Report'
    ReportAddressesList:
      description: List of Report addresses
      schema:
        properties:
          count:
            example: 1
            type: integer
          data:
            items:
              $ref: '#/definitions/ReportAddresses'
            type: array
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
    ReportCreated:
      description: Report was successfully created
      schema:
        $ref: '#/definitions/Report'
    ReportEtaAvailable:
      description: Report ETA
      schema:
        $ref: '#/definitions/ReportETA'
    ReportTags:
      description: List of report tags.
      schema:
        $ref: '#/definitions/ReportTags'
    ReportTagsAdded:
      description: Report tag was successfully created
      schema:
        properties:
          count:
            example: 3
            format: integer
            type: number
          data:
            example:
              - name: EIN-234234234
              - name: api-generated
              - name: In Progress
            items:
              properties:
                name:
                  type: string
              type: object
            type: array
          object:
            enum:
              - list
            example: list
            type: string
        type: object
    ReportTagsDeleted:
      description: Report tags were successfully deleted
      schema:
        properties:
          count:
            example: 1
            format: integer
            type: number
          data:
            example:
              - name: To Review
            items:
              properties:
                name:
                  type: string
              type: object
            type: array
          object:
            enum:
              - list
            example: list
            type: string
        type: object
    ReportTagsUpdated:
      description: Report tags were successfully updated
      schema:
        properties:
          count:
            example: 2
            format: integer
            type: number
          data:
            example:
              - name: West Coast
              - name: To Review
            items:
              properties:
                name:
                  type: string
              type: object
            type: array
          object:
            enum:
              - list
            example: list
            type: string
        type: object
    ReportUpdated:
      description: Report was successfully updated
      schema:
        $ref: '#/definitions/Report'
    School:
      description: School details
      schema:
        $ref: '#/definitions/School'
    SchoolCreated:
      description: School was successfully created
      schema:
        $ref: '#/definitions/School'
    SchoolDeleted:
      description: School was successfully deleted
      schema:
        $ref: '#/definitions/School'
    SchoolsList:
      description: List of Schools
      schema:
        properties:
          data:
            items:
              $ref: '#/definitions/School'
            type: array
          next_href:
            format: uri
            type: string
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
    SexOffenderSearch:
      description: Sex Offender Registry Search details
      schema:
        $ref: '#/definitions/SexOffenderSearch'
    SsnTrace:
      description: SSN Trace details
      schema:
        $ref: '#/definitions/SsnTrace'
    StateCriminalSearch:
      description: State Criminal Search details
      schema:
        $ref: '#/definitions/StateCriminalSearch'
    Subscription:
      description: Subscription details
      schema:
        $ref: '#/definitions/Subscription'
    SubscriptionCanceled:
      description: Subscription was successfully canceled
      schema:
        $ref: '#/definitions/Subscription'
    SubscriptionCreated:
      description: Subscription was successfully created
      schema:
        $ref: '#/definitions/Subscription'
    UnauthorizedError:
      description: Unauthorized
      schema:
        $ref: '#/definitions/UnauthorizedError'
    UsedGeoError:
      description: Geo used
      schema:
        $ref: '#/definitions/UsedGeoError'
    Verification:
      description: Verification details
      schema:
        $ref: '#/definitions/Verification'
    VerificationsList:
      description: List of Report Verifications
      schema:
        properties:
          count:
            example: 2
            type: integer
          data:
            items:
              $ref: '#/definitions/Verification'
            type: array
          object:
            description: A list
            enum:
              - list
            type: string
        type: object
  requestBodies:
    AccountCreate:
      in: body
      name: body
      required: true
      schema:
        properties:
          client_id:
            description: Client credentials provided as part of your Partner Application.
            example: 56269e3411a549fd07ed8d92
            type: string
          company:
            properties:
              city:
                description: City where company is headquartered.
                example: San Francisco
                type: string
              dba_name:
                description: >-
                  Name of Company displayed in Checkr emails and branded web
                  pages.
                example: Acme
                type: string | nil
              incorporation_state:
                description: |
                  State where company is incorporated. Format: `ISO 3166-2:US`.
                example: CA
                type: string | nil
              incorporation_type:
                description: Type of incorporation.
                enum:
                  - association
                  - co-ownership
                  - corporation
                  - joint-venture
                  - limited-partnership
                  - llc
                  - llp
                  - non-profit
                  - partnership
                  - s-corporation
                  - sp
                  - trusteeship
                type: string
              industry:
                description: |
                  Industry that company operates in. Format: `NAICS 2017 Code`.
                example: '72'
                type: string | nil
              phone:
                description: Company phone number.
                example: 206-555-0100
                type: string | nil
              state:
                description: |
                  State where company is headquartered. Format: `ISO 3166-2:US`.
                example: CA
                type: string
              street:
                description: Street address where company is headquartered.
                example: 123 Main Street
                type: string
              tax_id:
                description: Company Tax ID number.
                example: '123456789'
                type: string
              website:
                description: Company website.
                example: 'https://www.example.com'
                type: string | nil
              zipcode:
                description: Zipcode where company is headquartered.
                example: '94107'
                type: string
            type: object
          default_compliance_city:
            description: |
              Fallback compliance city if candidate location is not provided.
            example: San Francisco
            type: string | nil
          default_compliance_state:
            description: >
              Fallback compliance state if candidate location is not provided.
              Format: `ISO 3166-2:US`.
            example: CA
            type: string | nil
          name:
            description: Name of Account displayed in the Dashboard.
            example: Acme Corporation
            type: string
          oauth_authorize:
            default: false
            description: Allows skipping of the /oauth/authorize call
            type: boolean
          purpose:
            description: >
              Permissible purpose to run background checks. Determines which
              background checks the Account is credentialed for.
            enum:
              - employment
              - business
              - insurance
              - tenant
            example: employment
            type: string
          user:
            properties:
              email:
                description: Email of the initial Admin user for the Account.
                example: user@example.com
                type: string
              full_name:
                description: Full name of the initial Admin user for the Account.
                example: Jeanette Hughes
                type: string
            type: object
        required:
          - client_id
          - name
          - purpose
          - user
          - company
        type: object
    AdverseActionCreate:
      in: body
      name: body
      required: true
      schema:
        properties:
          adverse_item_ids:
            description: IDs of Adverse Items selected for the Adverse Action.
            items:
              type: string
            type: array
          post_notice_scheduled_at:
            description: >-
              Time at which the Post-Adverse Action notification will be sent.
              Default is 7 days after creation.
            example: '2016-10-07T12:34:00Z'
            format: date-time
            type: string
        required:
          - adverse_item_ids
        type: object
    CandidateCreate:
      in: body
      name: body
      required: true
      schema:
        properties:
          copy_requested:
            default: false
            description: >-
              If `true`, the candidate has asked to receive a copy of their
              report.
            type: boolean
          dob:
            description: Candidate’s date of birth.
            example: '1970-01-22'
            format: date
            type: string
          driver_license_number:
            description: Candidate’s driver license number.
            example: F211165
            type: string
          driver_license_state:
            description: |
              Candidate’s driver license state of issue.
              Format: `ISO 3166-2:US`.
            example: CA
            type: string
          email:
            description: |
              Candidate’s email address.
            example: john.smith@gmail.com
            format: email
            type: string
          first_name:
            description: |
              Candidate’s first name.
            example: John
            minLength: 1
            pattern: '[a-zA-Z0-9 -''.,]*'
            type: string
          geo_ids:
            description: Array of Geo IDs.
            items:
              example: 79f943e212cce7de21c054a8
              type: string
            type: array
          id:
            $ref: '#/definitions/ResourceId'
          last_name:
            description: Candidate’s last name.
            example: Smith
            minLength: 1
            pattern: '[a-zA-Z0-9 -''.,]*'
            type: string
          middle_name:
            description: >
              Candidate’s middle name. This field is required if
              `no_middle_name` is `false`.
            example: Alfred
            pattern: '[a-zA-Z0-9 -''.,]*'
            type: string
          mother_maiden_name:
            description: |
              Candidate’s mother’s maiden name.
            example: Jones
            pattern: '[a-zA-Z0-9 -''.,]*'
            type: string
          no_middle_name:
            default: false
            description: >
              Required if no `middle_name` is provided. `true` if the candidate
              has no middle name.
            type: boolean
          object:
            enum:
              - candidate
            readOnly: true
            type: string
          phone:
            description: Candidate’s phone number.
            example: 5555555555
            type: string | nil
          previous_driver_license_number:
            description: Candidate’s previous driver license number.
            example: F1501739
            type: string
          previous_driver_license_state:
            description: |
              State that issued the candidate’s previous driver license.
              Format: `ISO 3166-2:US`.
            example: MD
            type: string
          report_ids:
            description: Array of Report IDs.
            items:
              example: 532e71cfe88a1d4e8d00000d
              type: string
            readOnly: true
            type: array
          ssn:
            description: >-
              Candidate’s Social Security Number. This value will be redacted in
              all return calls, except for the last four digits.
            example: XXX-XX-4645
            type: string
          zipcode:
            description: Candidate’s 5-digit zip code.
            example: '90401'
            type: string
        required:
          - first_name
          - last_name
          - email
        type: object
    CandidatePatch:
      in: body
      name: body
      required: true
      schema:
        $ref: '#/definitions/Candidate'
    CandidatePiiRemoval:
      in: body
      name: body
      required: true
      schema:
        properties:
          deletion_contact_email_address:
            description: Email address of person requesting candidate's PII removal.
            example: john.smith@gmail.com
            type: string
          deletion_contact_first_name:
            description: First name of person requesting candidate's PII removal.
            example: John
            type: string
          deletion_contact_last_name:
            description: Last name of person requesting candidate's PII removal.
            example: Smith
            type: string
        required:
          - deletion_contact_email_address
        type: object
    CandidateStoryCreate:
      in: body
      name: body
      required: true
      schema:
        properties:
          content:
            description: Additional information provided by Candidate.
            example: >-
              Since my case, I have received the following certifications (see
              attachments)
            type: string
          documents:
            description: >-
              An array of documents to attach to the Candidate Story. Can be
              empty.
            items:
              properties:
                filename:
                  description: File name
                  example: evidence_of_rehab.pdf
                  type: string
                tempfile:
                  description: Accessible resource from which the document will be copied.
                  example: 'https://tempfilebucket.aws.example.com/abYwtudnakfnafl'
                  type: string
                type:
                  description: Document MIME type
                  enum:
                    - application/pdf
                    - image/bmp
                    - image/gif
                    - image/heic
                    - image/jpeg
                    - image/jpg
                    - image/png
                    - image/tiff
                  example: application/pdf
                  type: string
              type: object
            type: array
          record_id:
            description: >
              ID of the Record existing on a Screening to which the Candidate
              Story is linked.

              When no record ID is provided, the Candidate Story is considered
              General Information.
            example: af3393b7d751206c7c67b6e5
            type: string
        required:
          - content
          - documents
        type: object
    DocumentUpload:
      in: formData
      name: body
      required: true
      schema:
        properties:
          file:
            description: >
              Path to the document on your local file system.


              Valid MIME types: `image/gif`, `image/jpg`, `image/jpeg`,
              `image/png`, `image/bmp`, `image/tiff`, `application/pdf`,
              `image/heic`.
            format: binary
            type: string
          type:
            enum:
              - consent
              - driver_license
              - previous_driver_license
              - state_id_card
              - passport
              - ssn_card
              - selfie
              - education_proof
              - employment_proof
            type: string
        required:
          - file
          - type
        type: object
    EmployerCreate:
      in: body
      name: body
      required: true
      schema:
        properties:
          address:
            $ref: '#/definitions/Address'
          candidate_id:
            description: ID of the Candidate being screened.
            example: xxx
            minLength: 1
            pattern: '[a-zA-Z0-9 -''.,]*'
            type: string
          contract_type:
            description: Candidate’s contract type.
            enum:
              - full_time
              - part_time
              - contract
              - internship
            example: full_time
            type: string
          do_not_contact:
            default: false
            description: 'If `true`, the employer will not be contacted about the Candidate.'
            example: false
            type: boolean
          employer_url:
            description: Employer’s website.
            example: www.employer.com
            type: string
          end_date:
            description: Candidate’s end date with the employer.
            example: '2017-05-01'
            format: date
            type: string
          id:
            $ref: '#/definitions/ResourceId'
          manager:
            properties:
              email:
                description: Candidate's manager's email address.
                example: joesmith@checkr.co
                type: string
              name:
                description: Candidate's manager's name.
                example: Joe Smith
                type: string
              phone:
                description: Candidate's manager's phone number.
                example: 212-555-1234
                type: string
              title:
                description: Candidate's manager's title.
                example: Engineering Manager
                type: string
            type: object
          name:
            description: Candidate’s employer’s name.
            example: Checkr
            minLength: 1
            pattern: '[a-zA-Z0-9 -''.,]*'
            type: string
          object:
            enum:
              - employer
            readOnly: true
            type: string
          position:
            description: Candidate’s position or title.
            example: Software Engineer
            type: string
          salary:
            description: Candidate’s gross salary in dollars annually.
            example: 10000
            type: integer
          start_date:
            description: Candidate’s start date with the employer.
            example: '2016-06-01'
            format: date
            type: string
        required:
          - name
          - position
          - contract_type
          - start_date
          - address
        type: object
    GeoCreate:
      in: body
      name: body
      required: true
      schema:
        properties:
          city:
            description: A major city within the input state.
            example: San Francisco
            type: string
          name:
            description: Human-readable name of the Geo.
            example: San Francisco
            type: string
          state:
            description: US state for the Geo.
            example: CA
            type: string
        required:
          - name
          - state
        type: object
    GeoUpdate:
      in: body
      name: body
      required: true
      schema:
        properties:
          city:
            description: Updates the Geo with the input city.
            example: San Francisco
            type: string | nil
        type: object
    HierarchyUpdate:
      in: body
      name: body
      required: true
      schema:
        properties:
          nodes:
            items:
              $ref: '#/definitions/HierarchyNode'
            type: array
        required:
          - nodes
        type: object
    InvitationCreate:
      in: body
      name: body
      required: true
      schema:
        properties:
          tags:
            description: Array of tags for the Report.
            items:
              type: string
            type: array
          candidate_id:
            description: ID of the Candidate for whom the Invitation is created.
            example: 551564b7865af96a28b13f36
            type: string
          node:
            description: |
              <font color="red">Required</font> for hierarchy-enabled accounts.

              `custom_id` of the associated node.
            type: string
          package:
            description: Values dependent on your Account settings.
            example: driver_pro
            type: string
          work_locations:
            description: >
              <font color="red">Required</font> for hierarchy-enabled accounts.


              Array of City and State key-value pairs. State is required; city
              is optional.
            items:
              $ref: '#/definitions/WorkLocation'
            type: array
        required:
          - package
          - candidate_id
        type: object
    ReportCreate:
      in: body
      name: body
      required: true
      schema:
        allOf:
          - properties:
              tags:
                description: Array of tags for the Report.
                items:
                  type: string
                type: array
              candidate_id:
                description: ID of the Candidate screened.
                example: e44aa283528e6fde7d542194
                type: string
              node:
                description: >
                  <font color="red">Required</font> for hierarchy-enabled
                  accounts.


                  `custom_id` of the associated node.
                type: string
              package:
                description: >
                  <font color="red">NOT</font> required for hierarchy-enabled
                  accounts.


                  Name of the Package.

                  Example: `driver_pro`
                type: string
              work_locations:
                description: >
                  <font color="red">Required</font> for hierarchy-enabled
                  accounts.


                  Array of City and State key-value pairs. State is required;
                  city is optional.
                items:
                  $ref: '#/definitions/WorkLocation'
                type: array
            type: object
          - required:
              - package
              - candidate_id
    SchoolCreate:
      in: body
      name: body
      required: true
      schema:
        properties:
          address:
            $ref: '#/definitions/Address'
          candidate_id:
            description: Candidate linked to this School resource.
            example: 83ebeagdec0948690863766f792ead24d61fe3f9
            minLength: 1
            pattern: '[a-zA-Z0-9 -''.,]*'
            type: string
          current:
            default: false
            description: Defines whether the Candidate is currently enrolled.
            type: boolean
          degree:
            description: Degree awarded to the Candidate.
            example: BA
            type: string
          end_date:
            description: Candidate’s end date with the School.
            example: '2017-05-10'
            format: date
            type: string
          id:
            $ref: '#/definitions/ResourceId'
          major:
            description: Candidate’s major.
            example: Russian Literature
            pattern: '[a-zA-Z0-9 -''.,]*'
            type: string
          minor:
            description: Candidate’s minor.
            example: Background Checks
            type: string
          name:
            description: Name of the School.
            example: College University
            minLength: 1
            pattern: '[a-zA-Z0-9 -''.,]*'
            type: string
          object:
            enum:
              - school
            readOnly: true
            type: string
          phone:
            description: School's phone number.
            example: 415-111-1111
            type: string | nil
          school_url:
            description: School’s website.
            example: www.collegeuniversity.com
            type: string
          start_date:
            description: Candidate’s start date with the School.
            example: '2012-09-22'
            format: date
            type: string
          year_awarded:
            description: Year in which the degree was awarded.
            example: 2017
            minLength: 1
            type: integer
        required:
          - name
          - degree
          - major
        type: object
    SubscriptionCreate:
      in: body
      name: body
      required: true
      schema:
        properties:
          candidate_id:
            description: ID of the candidate being screened.
            type: string
          interval_count:
            description: The number of intervals between each recurrent background check.
            type: integer
          interval_unit:
            description: Interval at which the subscription will repeat.
            enum:
              - day
              - week
              - month
              - year
            type: string
          package:
            description: Package to run for the Report.
            type: string
          start_date:
            description: >-
              Start date for the subscription. This is the date on which the
              subscription will begin, and the first time the report will be
              run.
            format: date
            type: string
        required:
          - package
          - candidate_id
          - start_date
        type: object
(tagGroups):
  - tags:
      - Account
      - Hierarchy (Enabled by request)
      - Candidates
      - Reports
      - Packages
      - Invitations
      - Geos
      - Programs
      - Subscriptions
      - Adverse Actions
      - Adverse Items
      - Verifications
      - Documents
      - Schools
      - Employers
      - Report Tags
      - Report Addresses
      - Report ETA
      - Candidate Stories
    name: Resources
  - tags:
      - SSN Trace
      - Sex Offender Registry Search
      - Global Watchlist Search
      - National Criminal Search
      - Federal Criminal Search
      - County Criminal Search
      - State Criminal Search
      - Motor Vehicle Report
      - Education Verification
      - Employment Verification
      - Identity Document Verification
    name: Screenings
securitySchemes:
  basic_auth:
    type: Basic Authentication
types:
  Account:
    type: object
    properties:
      adverse_action_email:
        description: >
          Email used to send pre- and post- Adverse Action notices on your
          behalf to candidates.

          It's also the address that will receive undeliverable notices if an
          Adverse Action notice

          isn't deliverable to a candidate.
        example: john.doe@example.com
        type: string
        (oas-format): email
      api_authorized:
        description: >
          Determines whether Account is authorized to use the API to order
          background checks.
        example: true
        default: false
        type: boolean
      authorized:
        description: |
          Determines whether Account is credentialed to order background checks.
        example: true
        default: false
        type: boolean
      available_screenings:
        description: |
          List of screening types available for the Account.
        example:
          - county_civil_search
          - county_criminal_search
          - municipal_criminal_search
          - employment_verification
          - federal_civil_search
          - federal_criminal_search
          - motor_vehicle_report
          - national_criminal_search
          - sex_offender_search
          - ssn_trace
          - state_criminal_search
        type: array
        items:
          pattern: '[a-z_]+'
          type: string
      billing_email:
        description: >
          Email that is used for Checkr to contact you about invoices and other
          billing communication.
        example: john.doe@example.com
        type: string
        (oas-format): email
      company:
        description: Company details
        type: object
        properties:
          city:
            description: City where company is headquartered.
            example: Wilmington
            type: string
          dba_name:
            description: >
              Doing-Business-As name of Company displayed in Checkr emails and
              branded web pages.
            example: ACME
            type: string
          incorporation_state:
            description: |
              Incorporation state. Format: `ISO 3166-2:US`.
            example: DE
            type: string
          incorporation_type:
            description: Type of incorporation.
            example: llc
            type: string
            enum:
              - association
              - co-ownership
              - corporation
              - joint-venture
              - limited-partnership
              - llc
              - llp
              - non-profit
              - partnership
              - s-corporation
              - sp
              - trusteeship
          industry:
            description: >-
              Industry that company operates in, as NAICS code (see
              https://www.naics.com)
            pattern: '[0-9-]+'
            example: 52-59
            type: string
          name:
            description: Registered company name.
            example: Acme Corporation
            type: string
          phone:
            description: Company phone number.
            example: 206-555-0100
            type: string
          state:
            description: |
              State where company is headquartered. Format: `ISO 3166-2:US`.
            example: DE
            type: string
          street:
            description: Street address where company is headquartered.
            example: 123 Main St
            type: string
          tax_id:
            description: Company Tax ID number.
            example: '123456789'
            type: string
          website:
            description: Company's official corporate website.
            example: 'https://example.com'
            type: string
          zipcode:
            description: Zipcode where company is headquartered.
            example: '19801'
            type: string
      compliance_contact_email:
        description: >
          Email for the main point of contact on your side to communicate with
          Checkr about

          compliance issues or updates. This is also where we'll send you the
          results of candidate

          disputes (for example, if we changed the information on a report).
        example: compliance.team@example.com
        type: string
        (oas-format): email
      created_at:
        description: Time at which the Account was created.
        example: '2020-01-07T00:26:49Z'
        type: datetime
      default_compliance_city:
        description: |
          Fallback compliance city if candidate location is not provided.
        example: San Francisco
        type: string | nil
      default_compliance_state:
        description: >
          Fallback compliance state if candidate location is not provided.
          Format: `ISO 3166-2:US`.
        example: CA
        type: string | nil
      geos_required:
        description: Determines whether a Geo must be provided to order a Report.
        default: false
        type: boolean
      id:
        type: ResourceId
      name:
        description: Name of Account displayed in the Dashboard.
        example: Acme Corp
        type: string
      object:
        type: string
        enum:
          - account
      purpose:
        description: |
          Permissible purpose to run background checks.
          Determines which background checks the Account is credentialed for.
        default: employment
        type: string
        enum:
          - employment
          - business
          - insurance
          - tenant
      support_email:
        description: >
          Email address used for candidates to contact you if they need to
          supply evidence

          of rehabilitation or other context during the Adverse Action process.
        example: support@example.com
        type: string | nil
        (oas-format): email
      support_phone:
        description: >
          Phone number used for candidates to contact you if they need to supply
          evidence of

          rehabilitation or other context during the Adverse Action process.
        example: 206-555-0188
        type: string | nil
      technical_contact_email:
        description: >
          The main point of contact on your side to communicate with Checkr
          about technical issues or

          updates.
        example: jane.smith@example.com
        type: string
        (oas-format): email
      uri:
        example: /v1/accounts/e44aa283528e6fde7d542194
        type: ResourceURI
      uri_name:
        description: >
          Unique slug referencing the Account. This appears in some
          Account-specific URL paths.
        pattern: '[a-z0-9-_]+'
        example: acme-corp
        type: string
  Address:
    type: object
    properties:
      city:
        description: City.
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: San Francisco
        type: string
      country:
        description: |
          Country.

          Format: `ISO 3166-1 alpha-2`
        example: US
        type: string
      state:
        description: State.
        example: CA
        type: string
      street:
        description: Street address.
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: 123 Main St.
        type: string
      unit:
        description: 'House, building or apartment number.'
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: '2000'
        type: string
      zipcode:
        description: 5-digit zip code.
        example: '90401'
        type: string
  AdverseAction:
    type: object
    properties:
      adverse_items:
        description: Array of Adverse Items on which the Action is based.
        type: array
        items:
          type: AdverseItem
      canceled_at:
        description: Time at which the Adverse Action was canceled.
        type: datetime | nil
      created_at:
        description: Time at which the Adverse Action was created.
        example: '2016-09-29T17:39:49Z'
        type: datetime
      id:
        type: ResourceId
      individualized_assessment_engaged:
        default: false
        type: boolean
      object:
        type: string
        enum:
          - adverse_action
        (oas-readOnly): true
      post_notice_ready_at:
        description: >
          Timestamp after which the post notice can be sent. (Often 7 days after
          `created_at`.)
        example: '2016-10-06T17:39:48Z'
        type: datetime
      post_notice_scheduled_at:
        description: >
          Timestamp at which the post Adverse Action notification will be sent.
          This time is

          dependent on the time at which the Pre-Adverse Action was created, and
          related settings

          within your Checkr system.
        example: '2016-10-07T12:34:00Z'
        type: datetime
      report_id:
        description: ID of the Report causing this adverse action.
        example: b861a56db1b1b89692dd6118
        type: string
      status:
        description: Status of the Adverse Action.
        example: pending
        type: string
        enum:
          - pending
          - complete
          - dispute
          - canceled
      uri:
        example: /v1/adverse_actions/57ed51e57619e8002a6683f2
        type: ResourceURI
  AdverseItem:
    type: object
    properties:
      id:
        type: ResourceId
      object:
        description: Defines the object type.
        type: string
        enum:
          - adverse_item
        (oas-readOnly): true
      text:
        description: Human-readable description of the Adverse Item.
        example: 'License status: Suspended'
        type: string
  BadHierarchyRequestError:
    type: object
    properties:
      error:
        example: nodes cannot be empty
        type: string
  BadPiiRequestError:
    type: object
    properties:
      error:
        example: Candidate has already had PII removed
        type: string
  BadRequestError:
    type: object
    properties:
      error:
        example: Dl number 'F211165' does not match the license number format in CA
        type: string
  Candidate:
    type: object
    properties:
      adjudication:
        description: The adjudication for the Candidate’s most recently created Report.
        type: string
        enum:
          - engaged
          - pre_adverse_action
          - post_adverse_action
      copy_requested:
        description: 'If `true`, the candidate has asked to receive a copy of their report.'
        default: false
        type: boolean
      custom_id:
        description: >-
          Client-assigned unique ID for the Candidate. Can be used to map Checkr
          Candidate IDs to your internal tracking system, and to search for
          Candidates through both the Dashboard and the API.
        type: string
      dob:
        description: Candidate’s date of birth.
        example: '1970-01-22'
        type: date-only
      driver_license_number:
        description: Candidate’s driver license number.
        example: F211165
        type: string
      driver_license_state:
        description: |
          Candidate’s driver license state of issue.
          Format: `ISO 3166-2:US`.
        example: CA
        type: string
      email:
        description: |
          Candidate’s email address.
        example: john.smith@gmail.com
        type: string
        (oas-format): email
      first_name:
        description: |
          Candidate’s first name.
        minLength: 1
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: John
        type: string
      geo_ids:
        description: Array of Geo IDs.
        type: array
        items:
          example: 79f943e212cce7de21c054a8
          type: string
      id:
        type: ResourceId
      last_name:
        description: Candidate’s last name.
        minLength: 1
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: Smith
        type: string
      middle_name:
        description: >
          Candidate’s middle name. This field is required if `no_middle_name` is
          `false`.
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: Alfred
        type: string
      mother_maiden_name:
        description: |
          Candidate’s mother’s maiden name.
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: Jones
        type: string
      no_middle_name:
        description: >
          Required if no `middle_name` is provided. `true` if the candidate has
          no middle name.
        default: false
        type: boolean
      object:
        type: string
        enum:
          - candidate
        (oas-readOnly): true
      phone:
        description: Candidate’s phone number.
        example: '5555555555'
        type: string | nil
      previous_driver_license_number:
        description: Candidate’s previous driver license number.
        example: F1501739
        type: string
      previous_driver_license_state:
        description: |
          State that issued the candidate’s previous driver license.
          Format: `ISO 3166-2:US`.
        example: MD
        type: string
      report_ids:
        description: Array of Report IDs.
        type: array
        items:
          example: 532e71cfe88a1d4e8d00000d
          type: string
        (oas-readOnly): true
      ssn:
        description: >-
          Candidate’s Social Security Number. This value will be redacted in all
          return calls, except for the last four digits.
        example: XXX-XX-4645
        type: string
      uri:
        example: /v1/candidates/e44aa283528e6fde7d542194
        type: ResourceURI
      zipcode:
        description: Candidate’s 5-digit zip code.
        example: '90401'
        type: string
  CandidateStory:
    type: object
    properties:
      content:
        description: Additional information provided by Candidate.
        example: >-
          Since my case, I have received the following certifications (see
          attachments)
        type: string
      created_at:
        description: Time at which the Candidate Story was created.
        example: '2020-04-17T07:48:34Z'
        type: datetime
      documents:
        description: Attached documents provided by Candidate.
        type: array
        items:
          type: CandidateStoryDocument
      id:
        type: ResourceId
      object:
        type: string
        enum:
          - candidate_story
        (oas-readOnly): true
      record:
        anyOf:
          - description: >
              Simplified representation of linked record.

              If `null`, Candidate Story is considered general information about
              the Candidate.
            type: object
            properties:
              case_number:
                description: 'Case number, if existing'
                example: NMND78D
                type: string | nil
              charge:
                description: 'Charge description, if existing'
                example: LIGHT OFFENSE
                type: string | nil
              id:
                description: Record ID
                example: 4e2a551f79e0095b35d4d3ca
                type: string
              location:
                description: >-
                  Location of the Record, can be a State, or a City and a State,
                  if existing
                example: 'San Mateo, CA'
                type: string | nil
              offense_date:
                description: 'Offense date, if existing'
                example: '2020-01-20'
                type: date-only | nil
          - type: nil
      report_id:
        description: ID of the Report to which the Candidate Story is linked.
        example: af3393b7d751206c7c67b6e5
        type: string
      uri:
        example: /v1/candidate_stories/e44aa283528e6fde7d542194
        type: ResourceURI
  CandidateStoryDocument:
    type: object
    properties:
      content_type:
        description: File’s content type.
        example: image/pdf
        type: string
      created_at:
        description: Time at which the Document was created.
        example: '2020-04-17T07:48:01Z'
        type: datetime
      download_uri:
        description: JSON encoded URL of the document. This URL is valid for 15 minutes.
        example: 'https://checkr-documents.checkr.com/download_path'
        type: string
      filename:
        description: File’s name.
        example: proof_of_rehabilitation.pdf
        type: string
      filesize:
        description: File’s size in bytes.
        example: 8576
        type: integer
      id:
        type: ResourceId
      object:
        type: string
        enum:
          - document
        (oas-readOnly): true
      type:
        description: The type of Document.
        example: candidate_story_document
        type: string
        enum:
          - candidate_story_document
  Charge:
    type: object
    properties:
      arrest_date:
        type: date-only | nil
      assessment:
        type: string
      charge:
        example: Fraud
        type: string
      charge_date:
        type: date-only | nil
      charge_id:
        type: string | nil
      charge_type:
        type: string | nil
      classification:
        example: Felony
        type: string
      conviction_date:
        example: '2011-06-02'
        type: date-only | nil
      court:
        example: Circuit & District Court
        type: string
      defendant:
        type: string | nil
      deposition:
        type: string | nil
      deposition_date:
        example: '2014-05-27'
        type: date-only
      disposition:
        example: Guilty
        type: string
      disposition_date:
        example: '2011-06-02'
        type: date-only
      jail_time:
        description: Sentenced to jail time.
        example: 15 Day(s)
        type: string
      next_court_date:
        example: '2011-06-02'
        type: date-only | nil
      offense_date:
        example: '2011-04-22'
        type: date-only
      plaintiff:
        type: string | nil
      plea:
        type: string
      prison_time:
        description: Sentenced to prison time.
        example: 4 Year(s)
        type: string
      probation_status:
        type: string | nil
      probation_time:
        description: Sentenced to probation time.
        type: string
      release_date:
        example: '2011-06-02'
        type: date-only | nil
      restitution:
        description: Sentenced to restitution.
        example: '220'
        type: string
      sentence:
        example: 'Active Punishment Minimum: 10Y'
        type: string
      sentence_date:
        type: date-only | nil
  CountyCriminalSearch:
    type: ScreeningsGenericPayload
    properties:
      county:
        description: County in which the record was recorded.
        example: SAN FRANCISCO
        type: string
      estimated_completion_date:
        description: Estimated date of completion for the Search.
        example: '2019-03-13'
        type: date-only
      estimated_completion_time:
        description: >-
          Estimated time of completion for the Search. This estimate will be
          based on the maximum turnaround time across all counties searched.
        example: '2019-03-13T16:31:07Z'
        type: datetime
      filtered_by_positive_adjudication_records:
        description: >-
          Array of CriminalRecord objects filtered out by your account’s
          Positive Adjudication Matrix.
        type: array
        items:
          type: Record
          properties:
            filtered_by_positive_adjudication_charges:
              description: >-
                Array of CriminalCharge objects filtered out by your account’s
                Positive Adjudication Matrix.
              type: array
              items:
                type: Charge
      object:
        enum:
          - county_criminal_search
        type: string
      records:
        description: Array of CriminalRecord objects.
        type: array
        items:
          type: Record
          properties:
            charges:
              type: array
              items:
                type: Charge
                properties:
                  arrest_date:
                    description: Recorded arrest date.
                    example: '2011-04-22'
                    type: date-only | nil
                  charge:
                    example: Sell Cocaine
                    type: string
                  defendant:
                    description: Defendant's name on the record.
                    example: John Alfred Smith
                    type: string | nil
                  sentence_date:
                    description: Recorded sentence date.
                    example: '2011-06-02'
                    type: date-only | nil
      state:
        description: State in which the record was recorded.
        example: CA
        type: string
      status:
        type: ScreeningStatus
        example: consider
      turnaround_time:
        example: 100800
        type: integer
      uri:
        example: /v1/county_criminal_searches/539fdcf335644a0ef4000001
        type: ResourceURI
  Document:
    type: object
    properties:
      content_type:
        description: File’s content type.
        example: image/jpeg
        type: string
      created_at:
        description: Time at which the Document was created.
        example: '2015-02-11T20:01:50Z'
        type: datetime
      download_uri:
        description: JSON encoded URL of the document. This URL is valid for 15 minutes.
        example: 'https://checkr-documents.checkr.com/download_path'
        type: string
      filename:
        description: File’s name.
        example: 1423684910_candidate_driver_license.jpg
        type: string
      filesize:
        description: File’s size in bytes.
        example: 8576
        type: integer
      id:
        type: ResourceId
      object:
        type: string
        enum:
          - document
        (oas-readOnly): true
      type:
        description: The type of Document.
        example: driver_license
        type: string
        enum:
          - consent
          - credit_report_consent_form
          - driver_license
          - driver_license_back
          - driver_license_history
          - drug_screen_donor_pass
          - education_proof
          - employment_proof
          - health_screening_occupational_health_document
          - health_screening_result_certificate
          - international_consent_form
          - passport
          - pdf_credit_report
          - pdf_health_report
          - pdf_individualized_assessment
          - pdf_report
          - pdf_self_disclosure
          - pdf_wisconsin_doj
          - previous_driver_license
          - screening_pass
          - selfie
          - ssn_card
          - state_id_card
          - state_id_card_back
  DuplicateGeoError:
    type: object
    properties:
      error:
        example: 'Duplicate geo, name: Napa, state: CA already exists'
        type: string
  EducationVerification:
    type: ScreeningsGenericPayload
    properties:
      object:
        enum:
          - education_verification
        type: string
      records:
        description: Array of CandidateEducationHistory records.
        type: array
        items:
          type: object
          properties:
            events:
              type: array
              items:
                type: object
                properties:
                  created_at:
                    example: '2017-06-29T14:42:47Z'
                    type: string
                  text:
                    example: started
                    type: string
                  type:
                    example: verification_start
                    type: string
            id:
              example: 592311d2113adf7e9c9f66b8
              type: string
            result:
              type: object
              properties:
                verified:
                  type: boolean
            school:
              type: School
            status:
              example: consider
              type: string
              enum:
                - pending
                - clear
                - consider
      status:
        type: ScreeningStatus
        example: consider
      turnaround_time:
        example: 603216
        type: integer
      uri:
        example: /v1/education_verifications/595511af261066005170f47
        type: ResourceURI
  Employer:
    type: object
    properties:
      address:
        type: Address
      candidate_id:
        description: ID of the Candidate being screened.
        minLength: 1
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: xxx
        type: string
      contract_type:
        description: Candidate’s contract type.
        example: full_time
        type: string
        enum:
          - full_time
          - part_time
          - contract
          - internship
      do_not_contact:
        description: 'If `true`, the employer will not be contacted about the Candidate.'
        default: false
        type: boolean
      employer_url:
        description: Employer’s website.
        example: www.employer.com
        type: string
      end_date:
        description: Candidate’s end date with the employer.
        example: '2017-05-01'
        type: date-only
      id:
        type: ResourceId
      manager:
        type: object
        properties:
          email:
            description: Candidate's manager's email address.
            example: joesmith@checkr.co
            type: string
          name:
            description: Candidate's manager's name.
            example: Joe Smith
            type: string
          phone:
            description: Candidate's manager's phone number.
            example: 212-555-1234
            type: string
          title:
            description: Candidate's manager's title.
            example: Engineering Manager
            type: string
      name:
        description: Candidate’s employer’s name.
        minLength: 1
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: Checkr
        type: string
      object:
        type: string
        enum:
          - employer
        (oas-readOnly): true
      position:
        description: Candidate’s position or title.
        example: Software Engineer
        type: string
      salary:
        description: Candidate’s gross salary in dollars annually.
        example: 10000
        type: integer
      start_date:
        description: Candidate’s start date with the employer.
        example: '2016-06-01'
        type: date-only
      uri:
        example: >-
          /v1/candidates/e44aa283528e6fde7d542194/employers/ca27df84be5b50dfa7ee1cda
        type: ResourceURI
  EmploymentVerification:
    type: ScreeningsGenericPayload
    properties:
      object:
        enum:
          - employment_verification
        type: string
      records:
        description: Array of CandidateEmploymentHistory objects.
        type: array
        items:
          type: object
          properties:
            employer:
              type: Employer
            events:
              type: array
              items:
                type: object
                properties:
                  created_at:
                    example: '2017-06-29T14:42:44Z'
                    type: string
                  text:
                    example: started
                    type: string
                  type:
                    example: verification_start
                    type: string
            id:
              example: 592311d2113adf7e9c9f66b8
              type: string
            result:
              type: object
              properties:
                contract_type:
                  type: ResultPayload
                  properties:
                    comments:
                      example: Full Time
                      type: string
                    ignored:
                      example: package
                      type: string | nil
                end_date:
                  type: ResultPayload
                  properties:
                    comments:
                      example: '2017-05-01'
                      type: string
                position:
                  type: ResultPayload
                  properties:
                    comments:
                      example: Software Development Engineer
                      type: string
                    ignored:
                      example: manual
                      type: string | nil
                    verified:
                      example: true
                      type: boolean
                questions:
                  description: List of questions for the candidate's employer.
                  type: array
                  items:
                    type: object
                    properties:
                      response:
                        description: The answer received in response to the question.
                        example: They resigned.
                        type: string
                      sort_number:
                        description: The position of the question within the list.
                        example: 1
                        type: integer
                      text:
                        description: The question that was asked.
                        example: >-
                          What is the documented reason for the employee's
                          departure?
                        type: string
                salary:
                  type: ResultPayload
                  properties:
                    comments:
                      example: '100000'
                      type: string
                    verified:
                      example: true
                      type: boolean
                start_date:
                  type: ResultPayload
                  properties:
                    comments:
                      example: '2016-06-01'
                      type: string
            status:
              example: consider
              type: string
              enum:
                - pending
                - clear
                - consider
      status:
        type: ScreeningStatus
        example: consider
      turnaround_time:
        example: 603216
        type: integer
      uri:
        example: /v1/employment_verifications/595511af261066005170f471
        type: ResourceURI
  FederalCriminalSearch:
    type: ScreeningsGenericPayload
    properties:
      object:
        enum:
          - federal_criminal_search
        type: string
      records:
        description: Array of CriminalRecord objects.
        type: array
        items:
          type: Record
          properties:
            arresting_agency:
              type: string
            charges:
              type: array
              items:
                type: Charge
      status:
        type: ScreeningStatus
        example: clear
      turnaround_time:
        example: 90
        type: integer
      uri:
        example: /v1/federal_criminal_searches/539fd88c101897f7cd000006
        type: ResourceURI
  ForbiddenError:
    type: object
    properties:
      error:
        example: You do not have permission to access the requested resource
        type: string
  Geo:
    type: object
    properties:
      city:
        description: City for the Geo.
        example: San Francisco
        type: string
      created_at:
        description: Time at which the Geo was created.
        example: '2015-01-18T12:34:00Z'
        type: datetime
      deleted_at:
        description: Time at which the Geo was deleted.
        type: datetime | nil
      id:
        type: ResourceId
      name:
        description: Human-readable name of the Geo.
        example: SF CA
        type: string
      object:
        type: string
        enum:
          - geo
        (oas-readOnly): true
      state:
        description: State for the Geo.
        example: CA
        type: string
      uri:
        example: /v1/geos/e44aa283528e6fde7d542194
        type: ResourceURI
  GeoCityUpdatedError:
    type: object
    properties:
      error:
        example: Geo city can not be updated if city already exists
        type: string
  GlobalWatchlistSearch:
    type: ScreeningsGenericPayload
    properties:
      object:
        enum:
          - global_watchlist_search
        type: string
      records:
        description: Array of CriminalRecord objects.
        type: array
        items:
          type: Record
          properties:
            charges:
              type: array
              items:
                type: Charge
                properties:
                  charge:
                    description: Recorded charge.
                    example: RICO murder
                    type: string
      status:
        type: ScreeningStatus
        example: consider
      turnaround_time:
        example: 90
        type: integer
      uri:
        example: /v1/global_watchlist_searches/539fd88c101897f7cd000008
        type: ResourceURI
  HierarchyNode:
    type: object
    properties:
      custom_id:
        description: >-
          Customer-defined unique ID for the node. Must be unique within your
          account.
        maxLength: 255
        minLength: 1
        example: zpy8orej4r614ize
        type: string
      name:
        description: >-
          The name for the node. This name will be displayed in the Checkr
          Dashboard.
        maxLength: 255
        minLength: 1
        example: Acme Staffing
        type: string
      parent_custom_id:
        description: >-
          The `custom_id` for the parent of this node. If not provided, this
          node will be placed at the top level of the hierarchy.
        maxLength: 255
        example: parent custom id
        type: string
        required: false
      tier:
        description: >-
          Customer-defined label for this level of the hierarchy. (For example
          "Department" or "Division")
        maxLength: 255
        example: department
        type: string
        required: false
  HierarchyNotFoundError:
    type: object
    properties:
      error:
        example: 'No hierarchy exists on account, or hierarchy ingestion is in progress'
        type: string
  HierarchyTree:
    type: object
    properties:
      children:
        description: >-
          List of child hierarchy trees with name, custom_id, tier and their
          children
        type: array
        items:
          type: HierarchyTree
        required: false
      custom_id:
        description: >-
          Customer-defined unique ID for the node. Must be unique within your
          account.
        example: zpy8orej4r614ize
        type: string
      name:
        description: >-
          The name for the node. This name will be displayed in the Checkr
          Dashboard.
        example: Acme Staffing
        type: string
      tier:
        description: >-
          Customer-defined label for this level of the hierarchy. (For example
          "Department" or "Division")
        example: department
        type: string
        required: false
  IdentityDocumentVerification:
    type: ScreeningsGenericPayload
    properties:
      capture_url:
        description: The URL the candidate uses to verify their Identity Documents.
        example: 'https://capture.checkr.com/idv/d8b712f6774f35b45d01'
        type: string
      checks:
        description: An array of objects used to verify the provided identity documents.
        type: object
        properties:
          candidate_data_match:
            description: >
              Compares data extracted during Identity Document Verification to
              Candidate-provided data.
            example:
              - name: full_name
                status: clear
              - name: dob
                status: clear
            type: array
            items:
              type: SubCheck
              properties:
                name:
                  enum:
                    - full_name
                    - dob
                  type: string
          document_validation:
            description: |
              Evaluates the quality of the ID provided.
            example:
              - name: compromised
                status: clear
              - name: data_consistency
                status: clear
              - name: data_validation
                status: clear
              - name: visual_authenticity
                status: clear
              - name: image_integrity
                status: clear
            type: array
            items:
              type: SubCheck
              properties:
                name:
                  enum:
                    - compromised
                    - data_consistency
                    - data_validation
                    - visual_authenticity
                    - image_integrity
                  type: string
          face_match:
            description: |
              Compares the selfie provided to the photo on the ID.
            example:
              - name: face_match
                status: clear
              - name: image_integrity
                status: clear
              - name: visual_authenticity
                status: clear
            type: array
            items:
              type: SubCheck
              properties:
                name:
                  enum:
                    - face_match
                    - image_integrity
                    - visual_authenticity
                  type: string
      document_ids:
        description: >-
          IDs of [Candidate Documents](#tag/Documents) captured for the
          screening.
        example:
          - fb4995376bc66d6fb67f1c22
          - 58261bf0aff84b41e5d81024
          - ced73ab5780fbba0d3f47ffc
        type: array
        items:
          type: string
      extracted_data:
        description: Data extracted from the ID.
        type: object
        properties:
          dob:
            example: '1975-01-10'
            type: date-only
          document_expiration:
            example: '2020-01-01'
            type: date-only
          document_issuer:
            example: Department of Motor Vehicles
            type: string
          document_issuer_country:
            example: USA
            type: string
          document_issuer_region:
            example: CA
            type: string
          document_number:
            example: F1234567
            type: string
          document_type:
            example: drivers_license
            type: string
          first_name:
            example: Jersey
            type: string
          full_name:
            example: Jersey John Smith
            type: string
          gender:
            example: Male
            type: string
          last_name:
            example: Smith
            type: string
          middle_name:
            example: John
            type: string
      object:
        enum:
          - identity_document_verification
        type: string
      provider:
        description: Checkr partner that processed the screening.
        example: idv_partner
        type: string
      status:
        description: Status of the verification.
        example: complete
        type: string
        enum:
          - pending
          - complete
          - suspended
      turnaround_time:
        example: 603216
        type: integer
      uri:
        example: /v1/identity_document_verifications/539fd88c101897f6cd000010
        type: ResourceURI
      verified:
        description: >-
          if `true`, document validity, selfie match, and PII match between the
          IDV and Candidate data have passed.
        example: true
        default: false
        type: boolean
  IngestionInProgressError:
    type: object
    properties:
      error:
        example: Ingestion is already in progress
        type: string
  Invitation:
    type: object
    properties:
      candidate_id:
        description: ID of the Candidate to whom the Invitation was sent.
        example: 551564b7865af96a28b13f36
        type: string
      completed_at:
        description: Time at which the Invitation was completed by the candidate.
        type: datetime | nil
      created_at:
        description: Time at which the Invitation was created.
        example: '2015-05-14T17:45:34Z'
        type: datetime
      deleted_at:
        description: Time at which the Invitation was deleted.
        type: string | nil
      expires_at:
        description: Time at which the Invitation will expire.
        example: '2015-05-21T17:45:34Z'
        type: datetime
      id:
        type: ResourceId
      invitation_url:
        description: URL for the Invitation.
        example: 'https://apply.checkr.com/invite/try-checkr/290f9d6d6e46/test'
        type: string
      object:
        type: string
        enum:
          - invitation
        (oas-readOnly): true
      package:
        description: Package associated with the Invitation.
        example: driver_pro
        type: string
      report_id:
        description: >-
          ID of the Report created by the completion of this Invitation. Will be
          null if the Invitation has not yet been completed.
        type: string | nil
      status:
        description: Status of the Invitation.
        example: pending
        type: string
        enum:
          - pending
          - completed
          - expired
      uri:
        example: /v1/invitations/e44aa283528e6fde7d542194
        type: ResourceURI
  MotorVehicleReport:
    type: ScreeningsGenericPayload
    properties:
      accidents:
        description: Array of Accident objects.
        type: array
        items:
          type: object
          properties:
            accident_date:
              example: '2009-04-12'
              type: string
            acd_code:
              type: string | nil
            action_taken:
              example: police report filed
              type: string
            city:
              type: string | nil
            county:
              example: SAN FRANCISCO
              type: string
            description:
              example: property damage
              type: string
            enforcing_agency:
              example: San Francisco PD
              type: string
            fatality_accident:
              default: false
              type: boolean
            fatality_count:
              type: integer
            fine_amount:
              type: number | nil
            group:
              description: Displays category type for an accident.
              example: property damage
              type: string | nil
              enum:
                - unspecified
                - property damage
                - personal injury
                - fatality
            injury_accident:
              default: false
              type: boolean
            injury_count:
              type: integer
            jurisdiction:
              type: string | nil
            license_plate:
              example: 6UM6938
              type: string
            order_number:
              example: 33-435932
              type: string
            points: {}
            policy_number:
              type: string | nil
            reinstatement_date:
              type: date-only | nil
            report_number:
              type: string | nil
            severity:
              type: string | nil
            state:
              description: |
                State.
                Format: `ISO 3166-2:US`
              type: string | nil
            state_code:
              type: string | nil
            ticket_number:
              type: string | nil
            vehicle_speed:
              type: number | nil
            vehicles_involved_count:
              example: 3
              type: integer
            violation_number:
              type: string | nil
      covid_extension:
        description: >-
          Returns `true` when the MVR report has been automatically adjusted for
          DMV license expiration date extension. This field will be returned in
          the response data for impacted reports only.
        type: boolean
      custom_rules:
        description: Array of the custom rules applied to generate this MVR.
        type: array
        items:
          type: string
      dob:
        description: >-
          Date of Birth of the individual the license was issued to as returned
          by the DMV.
        example: '1980-01-01'
        type: date-only
      experience_failed:
        description: 'If true, the MVR has an unsatisfied StrictExperience rule.'
        default: false
        type: boolean
      expiration_date:
        description: Date on which the license expires.
        example: '2016-07-24'
        type: date-only
      first_issued_date:
        description: >-
          Date on which the license was first issued. Used to determine if the
          candidate meets minimum experience requirements.
        example: '2000-01-14'
        type: date-only
      full_name:
        description: 'Candidate’s full name, as listed with the DMV.'
        example: John Alfred Smith
        type: string
      inferred_issued_date:
        description: Checkr-inferred license issued date based on data returned by the DMV.
        type: date-only | nil
      issued_date:
        description: Date on which the license was issued.
        example: '2006-12-03'
        type: date-only
      license_class:
        description: Class of the license as returned by the DMV.
        example: C
        type: string
      license_number:
        description: Candidate’s driver’s license number.
        example: F2111132
        type: string
      license_state:
        description: Candidate’s driver’s license state of issue.
        example: CA
        type: string
      license_status:
        description: >-
          Status of the license as returned by the DMV if found, or status
          indicating the license is not found or not available.
        example: 'valid, expired, not_found'
        type: string
      license_type:
        description: Type of the license as returned by the DMV.
        example: 'personal, commercial, or non-commercial'
        type: string
      not_found:
        description: >-
          No license found by the DMV matching the candidate's license
          number/state and PII.
        default: false
        type: boolean
      object:
        enum:
          - motor_vehicle_report
        type: string
      previous_license_number:
        description: Candidate’s previous driver’s license number.
        example: F2111132
        type: string
      previous_license_state:
        description: Candidate’s previous driver’s license state of issue.
        example: CA
        type: string
      privilege_to_drive:
        description: >-
          Displays the validity of the license, as determined by the returned
          `license_status`, `license_class`, and `expiration_date`. If one or
          more of these three fields indicates that the license is not valid,
          `privilege_to_drive` is `invalid`.
        example: valid
        type: string
        enum:
          - valid
          - invalid
      restrictions:
        description: 'Array of restrictions, as returned by the individual states'' DMV.'
        type: array
        items:
          type: string
      status:
        type: ScreeningStatus
        example: consider
      suspensions:
        description: Array of Suspension objects.
        type: array
        items:
          type: object
          properties:
            description:
              example: ACCUMULATION OF CONVICTIONS OR POINTS
              type: string
            end_date:
              example: '2012-03-21'
              type: string
            start_date:
              example: '2011-11-14'
              type: string
            state:
              example: CA
              type: string
      turnaround_time:
        example: 90
        type: integer
      uri:
        example: /v1/motor_vehicle_reports/539fd88c101897f7cd000007
        type: ResourceURI
      violations:
        description: Array of Violation objects.
        type: array
        items:
          type: object
          properties:
            acd_code:
              type: string | nil
            category:
              type: string | nil
            city:
              type: string | nil
            conviction_date:
              example: '2010-04-11'
              type: string
            county:
              example: SANTA CLARA
              type: string
            court_name:
              type: string | nil
            description:
              example: speeding 15-19 mph
              type: string
            disposition:
              type: string | nil
            docket:
              type: string | nil
            issued_date:
              example: '2011-11-14'
              type: string
            points:
              type: integer
            state:
              example: California
              type: string
            state_code:
              type: string | nil
            ticket_number:
              example: 2D55555
              type: string
            type:
              example: conviction
              type: string
  NationalCriminalSearch:
    type: ScreeningsGenericPayload
    properties:
      object:
        enum:
          - national_criminal_search
        type: string
      records:
        description: Array of CriminalRecord objects.
        type: array
        items:
          type: Record
          properties:
            arresting_agency:
              type: string
            charges:
              type: array
              items:
                type: Charge
      status:
        type: ScreeningStatus
        example: clear
      turnaround_time:
        example: 90
        type: integer
      uri:
        example: /v1/national_criminal_searches/539fd88c101897f7cd000006
        type: ResourceURI
  Package:
    type: object
    properties:
      created_at:
        description: Time at which the Package was created.
        example: '2014-01-18T12:34:00Z'
        type: datetime
      deleted_at:
        description: Time at which the Package was deleted.
        example: '2014-01-18T12:34:00Z'
        type: datetime
      id:
        type: ResourceId
      name:
        description: Human-readable name of the Package.
        example: Criminal Pro
        type: string
      object:
        type: string
        enum:
          - package
        (oas-readOnly): true
      price:
        description: Package price in USD cents.
        example: 6500
        type: integer
      screenings:
        type: array
        items:
          type: object
          properties:
            subtype:
              type: string | nil
            type:
              example: ssn_trace
              type: string
              enum:
                - ssn_trace
                - sex_offender_search
                - global_watchlist_search
                - national_criminal_search
                - municipal_criminal_search
                - county_criminal_search
                - state_criminal_search
                - federal_criminal_search
                - county_civil_search
                - federal_civil_search
                - personal_reference_verification
                - professional_reference_verification
                - education_verification
                - employment_verification
                - drug_screening
                - international_criminal_search
                - motor_vehicle_report
                - eviction_search
                - credit_report
                - facis_search
      slug:
        description: Unique key identifier of the Package.
        example: criminal_pro
        type: string
      uri:
        example: /v1/packages/e44aa283528e6fde7d542194
        type: ResourceURI
  PreExistingAdverseActionError:
    type: object
    properties:
      error:
        example: >-
          Report has a pre-existing adverse action. See
          https://docs.checkr.com/#operation/updateReport
        type: string
  PredictionUnavailable:
    type: object
    properties:
      error:
        example: Report ETA prediction unavailable
        type: string
  Program:
    type: object
    properties:
      created_at:
        description: Time at which the resource was created.
        example: '2017-08-07T16:51:09Z'
        type: datetime
      deleted_at:
        description: Time at which the resource was deleted.
        type: datetime | nil
      geo_ids:
        description: Array of associated Geo IDs.
        type: array
        items:
          example: cbc37748bc6a45b41af5c3f5
          type: string
      id:
        type: ResourceId
      name:
        description: Human-readable name of the Program.
        example: Program A
        type: string
      object:
        type: string
        enum:
          - program
        (oas-readOnly): true
      package_ids:
        description: Array of associated Package IDs.
        type: array
        items:
          example: a57a0cd15965a585ff7d5d35
          type: string
  Record:
    type: object
    properties:
      address:
        type: Address
      arresting_agency:
        example: DEA Boston Division
        type: string
      case_number:
        example: 24323-DA
        type: string
      county:
        example: SUFFOLK
        type: string
      court_jurisdiction:
        type: string | nil
      court_of_record:
        type: string | nil
      dob:
        example: '1970-01-22'
        type: string
      file_date:
        type: date-only | nil
      full_name:
        example: John Alfred Smith
        type: string
      id:
        type: ResourceId
      state:
        example: MA
        type: string
      yob:
        example: 1970
        type: integer
  Report:
    type: object
    properties:
      adjudication:
        description: >
          The adjudication for the candidate. `Null` if no adjudication has been
          made.
        example: engaged
        type: string | nil
        enum:
          - engaged
          - pre_adverse_action
          - post_adverse_action
      arrest_search_id:
        description: ID of the Arrest Search linked to the report.
        example: 539fd88c101897f7cd000001
        type: string
      candidate_id:
        description: ID of the candidate being screened.
        example: e44aa283528e6fde7d542194
        type: string
      candidate_story_ids:
        description: Array of Candidate Story IDs linked to the Report.
        type: array
        items:
          example: 989b4c2d83dd8a81547f2dae
          type: string
      completed_at:
        description: |
          Time at which the report was completed.
        example: '2014-01-18T12:35:30Z'
        type: datetime
      county_criminal_search_ids:
        description: Array of County Criminal Search IDs linked to the Report.
        type: array
        items:
          example: 539fdcf335644a0ef4000003
          type: string
      created_at:
        description: |
          Time at which the report was created.
        example: '2014-01-18T12:34:00Z'
        type: datetime
      document_ids:
        description: Array of Document IDs.
        type: array
        items:
          example: 539fdcf335496a0ef4000003
          type: string
      drug_screening:
        description: Embedded Drug Screening object
        type: object
        properties:
          analytes:
            description: Array of result analytes from the Drug Screening Panel
            type: array
            items:
              type: object
              properties:
                disposition:
                  description: Medical evaluation for specific drug
                  example: negative
                  type: string
                  enum:
                    - negative
                    - positive
                name:
                  description: Name of drug that was tested
                  example: Marijuana
                  type: string
                specimen_type:
                  description: Type of specimen that was tested
                  example: urine
                  type: string
                  enum:
                    - urine
                    - breath
                    - saliva
          appointment_id:
            description: ID of the Appointment linked to the Drug Screening.
            example: 539fd88c101897f7cd000001
            type: string
          disposition:
            description: Medical evaluation for entire screening
            example: negative
            type: string
            enum:
              - negative
              - positive
              - canceled
          events:
            description: Array of drug screening events
            type: array
            items:
              type: object
              properties:
                created_at:
                  description: Time the event was created
                  example: '2014-01-19T11:28:31Z'
                  type: datetime
                text:
                  description: Additional note for event type
                  example: Specimen Sent to Lab
                  type: string
                type:
                  description: Type of event
                  example: status_update
                  type: string
                  enum:
                    - completed
                    - screening_invitation_sent
                    - screening_scheduled
                    - status_update
          id:
            description: ID of the Drug Screening linked to the Report.
            example: 539fd88c101897f7cd000001
            type: string
          mro_notes:
            description: Notes from Medical Review Officer
            example: Diluted Sample
            type: string
          screening_pass_expires_at:
            description: Time the Candidate has to complete the drug screening
            example: '2014-01-19T11:28:31Z'
            type: datetime
          status:
            description: |
              Status of the Drug Screening.
            example: clear
            type: string
            enum:
              - pending
              - clear
              - consider
              - suspended
      drug_screening_id:
        description: ID of the Drug Screening linked to the report.
        example: 539fd88c101897f7cd000001
        type: string
      estimated_completion_time:
        description: |
          Time at which the report is predicted to be finished.
        example: '2019-07-31T00:00:00Z'
        type: datetime
      facis_search_id:
        description: ID of the FACIS Search linked to the Report.
        example: 539fd88c101897f7cd000001
        type: string
      federal_criminal_search_id:
        description: ID of the Federal Criminal Search linked to the Report.
        example: 539fd88c101897f7cd000001
        type: string
      geo_ids:
        description: Array of Geo IDs.
        type: array
        items:
          example: 87f5bb4983eade22c55f4731
          type: string
      global_watchlist_search_id:
        description: ID of the Global Watchlist Search linked to the Report.
        example: 539fd88c101897f7cd000001
        type: string
      id:
        type: ResourceId
      identity_document_verification_id:
        description: ID of the Identity Document Verification linked to the Report
        example: 539fd88c101897f6cd000010
        type: string
      motor_vehicle_report_id:
        description: ID of the Motor Vehicle Record Search linked to the Report.
        example: 539fd88c101897f7cd000007
        type: string
      national_criminal_search_id:
        description: ID of the National Criminal Search linked to the Report.
        example: 539fd88c101897f7cd000006
        type: string
      object:
        description: |
          Defines the object type: `report`.
        type: string
        enum:
          - report
        (oas-readOnly): true
      package:
        description: |
          Human-readable name of the Package.
        example: driver_pro
        type: string
      personal_reference_verification_ids:
        description: Array of Personal Reference Verification IDs linked to the Report.
        type: array
        items:
          example: 539fdcf335644a0ef4000003
          type: string
      professional_reference_verification_ids:
        description: Array of Professional Reference Verification IDs linked to the Report.
        type: array
        items:
          example: 539fdcf335644a0ef4000003
          type: string
      program_id:
        description: |
          ID of the Program linked to the Report.
        example: 00166f9ff39ec7b453adfaec
        type: string
      revised_at:
        description: |
          Time at which the report was revised.
        type: datetime | nil
      sex_offender_search_id:
        description: ID of the Sex Offender Registry Search linked to the Report.
        example: 539fd88c101897f7cd000008
        type: string
      source:
        description: >-
          The method used to create the report. <br>`api` created from the
          Checkr API. <br>`continuous_check` created automatically from a
          Continuous Check return. <br>`form` created from the Checkr Hosted
          Invite/Apply flow. <br>`manual_order` created from a manual order
          (customer enters candidate's PII) originating in the Checkr Dashboard.
          <br>`recurrence` created from a Subscription. <br>`web` created from a
          report ordered from the Checkr Dashboard.
        example: api
        type: string
        enum:
          - api
          - continuous_check
          - form
          - manual_order
          - recurrence
          - web
      ssn_trace_id:
        description: ID of the SSN Trace linked to the Report.
        example: 539fd88c101897f7cd000001
        type: string
      state_criminal_searches:
        description: Array of State Criminal Search IDs linked to the Report.
        type: array
        items:
          example: 539fdcf335644a0ef4000003
          type: string
      status:
        description: |
          Status of the report.
        example: clear
        type: string
        enum:
          - pending
          - clear
          - consider
          - complete
          - suspended
          - dispute
      turnaround_time:
        description: >-
          Number of seconds the report took to complete, calculated from
          `created_at` to `completed_at`.
        example: 90
        type: integer
      upgraded_at:
        description: |
          Time at which the report was upgraded.
        type: datetime | nil
      uri:
        example: /v1/reports/4722c07dd9a10c3985ae432a
        type: ResourceURI
  ReportAddresses:
    type: object
    properties:
      city:
        example: San Francisco
        type: string
      end_date:
        example: '2018-01-24T17:41:20Z'
        type: datetime
      name:
        description: Name of location.
        example: UCSF
        type: string
      start_date:
        example: '2018-07-22T17:41:20Z'
        type: datetime
      state:
        example: CA
        type: string
  ReportETA:
    type: object
    properties:
      estimate_generated_at:
        description: |
          Time at which the prediction was created.
        example: '2014-01-18T12:34:00Z'
        type: datetime
      estimated_completion_time:
        description: |
          Time at which the report is predicted to be finished.
        example: '2019-07-31T00:00:00Z'
        type: datetime
  ReportTags:
    type: object
    properties:
      count:
        example: 2
        type: number
        (oas-format): integer
      data:
        example:
          - name: EIN-234234234
          - name: api-generated
        type: array
        items:
          type: object
          properties:
            name:
              type: string
      object:
        example: list
        type: string
        enum:
          - list
  ResourceId:
    description: ID of the resource.
    example: e44aa283528e6fde7d542194
    type: string
    (oas-readOnly): true
  ResourceURI:
    description: URI of the resource.
    type: string
    (oas-readOnly): true
  ResultPayload:
    type: object
    properties:
      comments:
        type: string
      ignored:
        type: string | nil
      verified:
        example: true
        type: boolean
  School:
    type: object
    properties:
      address:
        type: Address
      candidate_id:
        description: Candidate linked to this School resource.
        minLength: 1
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: 83ebeagdec0948690863766f792ead24d61fe3f9
        type: string
      current:
        description: Defines whether the Candidate is currently enrolled.
        default: false
        type: boolean
      degree:
        description: Degree awarded to the Candidate.
        example: BA
        type: string
      end_date:
        description: Candidate’s end date with the School.
        example: '2017-05-10'
        type: date-only
      id:
        type: ResourceId
      major:
        description: Candidate’s major.
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: Russian Literature
        type: string
      minor:
        description: Candidate’s minor.
        example: Background Checks
        type: string
      name:
        description: Name of the School.
        minLength: 1
        pattern: '[a-zA-Z0-9 -''.,]*'
        example: College University
        type: string
      object:
        type: string
        enum:
          - school
        (oas-readOnly): true
      phone:
        description: School's phone number.
        example: 415-111-1111
        type: string | nil
      school_url:
        description: School’s website.
        example: www.collegeuniversity.com
        type: string
      start_date:
        description: Candidate’s start date with the School.
        example: '2012-09-22'
        type: date-only
      uri:
        example: /v1/schools/e44aa283528e6fde7d542194
        type: ResourceURI
      year_awarded:
        description: Year in which the degree was awarded.
        example: 2017
        type: integer
  ScreeningStatus:
    description: Status of the screening.
    type: string
    enum:
      - pending
      - clear
      - consider
  ScreeningsGenericPayload:
    type: object
    properties:
      completed_at:
        description: Time at which the screening was completed.
        example: '2014-01-18T12:35:30Z'
        type: datetime
      created_at:
        description: Time at which the screening was created.
        example: '2014-01-18T12:34:00Z'
        type: datetime
      id:
        type: ResourceId
      object:
        type: string
      status:
        type: string
      turnaround_time:
        description: >-
          Number of seconds the screening took to complete, calculated from
          `created_at` to `completed_at`.
        type: integer
      uri:
        type: ResourceURI
  SexOffenderSearch:
    type: ScreeningsGenericPayload
    properties:
      object:
        example: sex_offender_search
        type: string
      records:
        description: Array of SexRecord objects.
        type: array
        items:
          type: object
          properties:
            age:
              description: Age listed on the record.
              example: 44
              type: integer
            dob:
              description: Date of birth listed on the record.
              example: '1975-02-01'
              type: date-only
            full_name:
              description: Name listed on the record.
              example: John Alfred Smith
              type: string
            registration_end:
              description: End date for the registration.
              example: '2012-02-12'
              type: date-only
            registration_start:
              description: Start date for the registration.
              example: '2011-02-12'
              type: date-only
            registry:
              description: State in which the record was registered.
              example: California
              type: string
            state:
              description: State listed for the record.
              example: CA
              type: string
      status:
        type: ScreeningStatus
        example: consider
      turnaround_time:
        example: 90
        type: integer
      uri:
        example: /v1/sex_offender_searches/539fd88c101897f7cd000008
        type: ResourceURI
  SsnTrace:
    type: ScreeningsGenericPayload
    properties:
      addresses:
        description: List of address objects.
        type: array
        items:
          type: Address
          properties:
            city:
              description: Returned city.
              example: San Francisco
              type: string
            from_date:
              description: Returned start date of residency.
              example: '2010-05-01'
              type: string
            street:
              description: Returned street address.
              example: 123 S Folsom St
              type: string
            to_date:
              description: Returned end date of residency.
              example: '2010-06-01'
              type: string
            unit:
              description: Returned apartment or unit number.
              example: Apt 54B
              type: string
      aliases:
        description: Array of name objects.
        type: array
        items:
          type: object
          properties:
            first_name:
              description: First name.
              example: Jack
              type: string
            last_name:
              description: Last name.
              example: Fieldman
              type: string
            middle_name:
              description: Middle name.
              example: B
              type: string
      data_mismatch:
        description: >-
          If true, information returned from the SSN Trace does not match any of
          the candidate’s provided information.
        default: false
        type: boolean
      death_index:
        description: >-
          If true, the input SSN is listed on the Social Security
          Administration's “Death Master File”.
        default: false
        type: boolean
      dob_mismatch:
        description: >-
          If true, the name on the SSN Trace matches the candidate's provided
          information, but the DOB does not.
        default: false
        type: boolean
      invalid_issuance_year:
        description: >-
          If true, the input SSN has a year of issuance that precedes the
          candidate's reported year of birth.
        default: false
        type: boolean
      issued_state:
        description: The US state where the ID was issued.
        example: CA
        type: string
      issued_year:
        description: The year the ID was issued.
        example: 1993
        type: integer
      name_mismatch:
        description: >-
          If true, the DOB associated with the addresses returned from the SSN
          Trace matches the candidate's input DOB, but the name does not.
        default: false
        type: boolean
      no_data:
        description: No data was returned for the input Candidate PII.
        default: false
        type: boolean
      object:
        enum:
          - ssn_trace
        type: string
      ssn:
        description: >-
          Candidate’s social security number. This value will be redacted in all
          return calls, except for the last four digits.
        example: XXX-XX-4645
        type: string
      ssn_already_taken:
        description: 'If true, another Candidate with same SSN already exists in our system.'
        default: false
        type: boolean
      status:
        type: ScreeningStatus
        example: clear
      thin_file:
        description: No information found.
        default: false
        type: boolean
      turnaround_time:
        example: 90
        type: integer
      uri:
        example: /v1/ssn_traces/539fd88c101897f7cd000001
        type: ResourceURI
  StateCriminalSearch:
    type: ScreeningsGenericPayload
    properties:
      completed_at:
        example: '2014-01-18T12:35:30Z'
        type: datetime
      created_at:
        example: '2014-01-18T12:34:00Z'
        type: datetime
      estimated_completion_time:
        description: >-
          Estimated time of completion for the Screening. This estimate will be
          based on the maximum turnaround time across all states searched.
        example: '2014-01-18T12:34:00Z'
        type: datetime
      filtered_by_positive_adjudication_records:
        description: >-
          Array of CriminalRecord objects filtered out by your account’s
          Positive Adjudication Matrix.
        type: array
        items:
          type: Record
      object:
        enum:
          - state_criminal_search
        type: string
      records:
        description: Array of CriminalRecord objects.
        type: array
        items:
          type: Record
          properties:
            arresting_agency:
              example: San Francisco Police Department
              type: string
            charges:
              type: array
              items:
                type: Charge
                properties:
                  arrest_date:
                    example: '2011-04-22'
                    type: date-only | nil
                  charge:
                    example: Sell Cocaine
                    type: string
                  defendant:
                    example: John Alfred Smith
                    type: string | nil
                  sentence_date:
                    example: '2011-06-02'
                    type: date-only | nil
            court_jurisdiction:
              example: San Francisco
              type: string | nil
            file_date:
              example: '2010-02-18'
              type: date-only | nil
      state:
        description: State searched for these records.
        example: CA
        type: string
      status:
        type: ScreeningStatus
        example: consider
      turnaround_time:
        example: 100800
        type: integer
      uri:
        example: /v1/state_criminal_searches/539fdcf335644a0ef4000001
        type: ResourceURI
  SubCheck:
    type: object
    properties:
      name:
        type: string
      status:
        type: string
        enum:
          - clear
          - consider
  Subscription:
    type: object
    properties:
      canceled_at:
        description: Time at which the Subscription was canceled.
        type: datetime | nil
      candidate_id:
        description: ID of the candidate screened.
        example: e44aa283528e6fde7d542194
        type: string
      created_at:
        description: Time at which the Subscription was created.
        example: '2014-01-18T12:34:00Z'
        type: datetime
      id:
        type: ResourceId
      interval_count:
        description: The number of intervals between each recurrent background check.
        example: 1
        type: integer
      interval_unit:
        description: Interval at which the Subscription will repeat.
        example: month
        type: string
        enum:
          - day
          - week
          - month
          - year
      object:
        type: string
        enum:
          - subscription
        (oas-readOnly): true
      package:
        description: Package to run for the Subscription.
        example: driver_pro
        type: string
      start_date:
        description: >-
          Start date for the Subscription. This is the date on which the
          Subscription will begin, and the first time the report will be run.
        example: '2014-06-10'
        type: date-only
      status:
        description: Status of the Subscription.
        example: active
        type: string
        enum:
          - active
          - inactive
      uri:
        description: URI of the Subscription.
        example: /v1/subscriptions/4722c07dd9a10c3985ae432a
        type: ResourceURI
  UnauthorizedError:
    type: object
    properties:
      error:
        example: Bad authentication error
        type: string
  UsedGeoError:
    type: object
    properties:
      error:
        example: Geo can not be deleted as it is used by Candidates
        type: string
  Verification:
    type: object
    properties:
      completed_at:
        description: >-
          Value will be null if the candidate has not uploaded the required
          documents, otherwise will contain the date and time that the documents
          were provided.
        type: datetime | nil
      created_at:
        example: '2014-01-18T12:34:00Z'
        type: datetime
      id:
        type: ResourceId
      object:
        type: string
        enum:
          - verification
        (oas-readOnly): true
      processed_at:
        description: >-
          Value will be null if the candidate has not uploaded the required
          documents, otherwise will contain the date and time that the documents
          were processed.
        type: datetime | nil
      report_id:
        description: Value include the report_id
        example: 4722c07dd9a10c3985ae432a
        type: string
      uri:
        example: /v1/verifications/db313e73383710d4fa2f18fd
        type: ResourceURI
      verification_type:
        example: id
        type: string
        enum:
          - id
          - education
      verification_url:
        description: URL to direct the candidate to upload documents.
        example: 'http://verifications.checkr.com/db313e73383710d4fa2f18fd'
        type: string
  WorkLocation:
    type: object
    properties:
      city:
        description: Name of the city
        maxLength: 255
        minLength: 1
        example: San Francisco
        type: string
        required: false
      state:
        description: The two letter state code.
        maxLength: 2
        minLength: 2
        example: CA
        type: string
/account:
  get:
    description: |
      Returns Account details for the authenticated account.
    displayName: account
    responses:
      '200':
        description: Account details
        body:
          application/json:
            type: Account
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve authenticated account details
    (oas-tags):
      - Account
    (code-samples):
      - lang: curl
        source: |-
          $ curl -X GET https://api.checkr.com/v1/account \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
/accounts:
  post:
    description: >
      Creates a customer Account associated with your [Partner
      Application](#section/Checkr-Partners).

      Only Checkr Partners are authorized to use this endpoint.
    displayName: createAccount
    responses:
      '200':
        description: Account details
        body:
          application/json:
            type: Account
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    body:
      application/json:
        type: object
        properties:
          client_id:
            description: Client credentials provided as part of your Partner Application.
            example: 56269e3411a549fd07ed8d92
            type: string
          company:
            type: object
            properties:
              city:
                description: City where company is headquartered.
                example: San Francisco
                type: string
              dba_name:
                description: >-
                  Name of Company displayed in Checkr emails and branded web
                  pages.
                example: Acme
                type: string | nil
              incorporation_state:
                description: |
                  State where company is incorporated. Format: `ISO 3166-2:US`.
                example: CA
                type: string | nil
              incorporation_type:
                description: Type of incorporation.
                type: string
                enum:
                  - association
                  - co-ownership
                  - corporation
                  - joint-venture
                  - limited-partnership
                  - llc
                  - llp
                  - non-profit
                  - partnership
                  - s-corporation
                  - sp
                  - trusteeship
              industry:
                description: |
                  Industry that company operates in. Format: `NAICS 2017 Code`.
                example: '72'
                type: string | nil
              phone:
                description: Company phone number.
                example: 206-555-0100
                type: string | nil
              state:
                description: |
                  State where company is headquartered. Format: `ISO 3166-2:US`.
                example: CA
                type: string
              street:
                description: Street address where company is headquartered.
                example: 123 Main Street
                type: string
              tax_id:
                description: Company Tax ID number.
                example: '123456789'
                type: string
              website:
                description: Company website.
                example: 'https://www.example.com'
                type: string | nil
              zipcode:
                description: Zipcode where company is headquartered.
                example: '94107'
                type: string
          default_compliance_city:
            description: |
              Fallback compliance city if candidate location is not provided.
            example: San Francisco
            type: string | nil
            required: false
          default_compliance_state:
            description: >
              Fallback compliance state if candidate location is not provided.
              Format: `ISO 3166-2:US`.
            example: CA
            type: string | nil
            required: false
          name:
            description: Name of Account displayed in the Dashboard.
            example: Acme Corporation
            type: string
          oauth_authorize:
            description: Allows skipping of the /oauth/authorize call
            default: false
            type: boolean
            required: false
          purpose:
            description: >
              Permissible purpose to run background checks. Determines which
              background checks the Account is credentialed for.
            example: employment
            type: string
            enum:
              - employment
              - business
              - insurance
              - tenant
          user:
            type: object
            properties:
              email:
                description: Email of the initial Admin user for the Account.
                example: user@example.com
                type: string
              full_name:
                description: Full name of the initial Admin user for the Account.
                example: Jeanette Hughes
                type: string
        (oas-body-name): body
    securedBy:
      - basic_auth
    (oas-summary): Create a new Account
    (oas-tags):
      - Account
    (code-samples):
      - lang: curl
        source: |
          $ curl -X POST https://api.checkr.com/v1/accounts \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
              -d client_id=56269e3411a549fd07ed8d92 \
              -d name=Acme+Corporation \
              -d default_compliance_state=CA \
              -d purpose=employment \
              -d user[full_name]=Jeanette+Hughes \
              -d user[email]=user@example.com \
              -d company[dba_name]=Acme \
              -d company[industry]=72 \
              -d company[street]=123+Main+Street \
              -d company[city]=San Francisco \
              -d company[state]=CA \
              -d company[zipcode]=94107 \
              -d company[tax_id]=123456789 \
              -d company[incorporation_state]=CA \
              -d company[incorporation_type]=association \
              -d company[phone]=206-555-0100 \
              -d company[website]=https%3A%2F%2Fwww.example.com
/adverse_actions:
  get:
    description: |
      Returns a list of existing Adverse Actions with the input parameter(s).
    displayName: listOfAdverseActions
    responses:
      '200':
        description: List of Adverse Actions
        body:
          application/json:
            type: object
            properties:
              data:
                type: array
                items:
                  type: AdverseAction
              next_href:
                type: string
                (oas-format): uri
              object:
                description: A list
                type: string
                enum:
                  - list
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    queryParameters:
      full_name:
        description: Full name of the Candidate to whom the Adverse Action is applied.
        type: string
        required: false
      status:
        description: Returns Adverse Actions with the input status.
        type: string
        enum:
          - pending
          - complete
          - dispute
          - canceled
        required: false
      created_after:
        description: Returns Adverse Actions created after this timestamp.
        type: datetime
        required: false
      created_before:
        description: Returns Adverse Actions created before this timestamp.
        type: datetime
        required: false
    securedBy:
      - basic_auth
    (oas-summary): List existing Adverse Actions
    (oas-tags):
      - Adverse Actions
  '/{id}':
    delete:
      description: |
        Cancels an existing Adverse Action.
      displayName: cancelAdverseAction
      responses:
        '200':
          description: Adverse Action was successfully canceled
          body:
            application/json:
              type: AdverseAction
        '400':
          description: Bad Request
          body:
            application/json:
              type: BadRequestError
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Cancel an existing Adverse Action
      (oas-tags):
        - Adverse Actions
      (code-samples):
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/adverse_actions/e44aa283528e6fdaa9542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    get:
      description: |
        Returns an existing Adverse Action with the input ID.
      displayName: getAdverseAction
      responses:
        '200':
          description: Adverse Action details
          body:
            application/json:
              type: AdverseAction
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Retrieve an existing Adverse Action
      (oas-tags):
        - Adverse Actions
      (code-samples):
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/adverse_actions/57ed51e57619e8002a6683f2 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    uriParameters:
      id:
        description: ID of the Adverse Action.
        type: string
/candidates:
  get:
    description: |
      Lists existing Candidates with the input parameters.
    displayName: listOfCandidates
    responses:
      '200':
        description: List of Candidates
        body:
          application/json:
            type: object
            properties:
              data:
                type: array
                items:
                  type: Candidate
              next_href:
                type: string
                (oas-format): uri
              object:
                description: A list
                type: string
                enum:
                  - list
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    queryParameters:
      email:
        description: Returns candidates with the input email address.
        type: string
        required: false
      full_name:
        description: Returns candidates with the input `full_name`.
        type: string
        required: false
      adjudication:
        description: >-
          Returns candidates with the input adjudication. `Null` if no
          adjudication has been made.
        type: string
        required: false
      custom_id:
        description: Returns candidates with the input `custom_id`.
        type: string
        required: false
      created_after:
        description: Returns candidates created after the input timestamp.
        type: datetime
        required: false
      created_before:
        description: Returns candidates created before the input timestamp.
        type: datetime
        required: false
      geo_id:
        description: Returns candidates with the input `geo_id`.
        type: string
        required: false
      program_id:
        description: Returns candidates with the input `program_id`.
        type: string
        required: false
    securedBy:
      - basic_auth
    (oas-summary): List existing Candidates
    (oas-tags):
      - Candidates
    (code-samples):
      - lang: curl
        source: |
          $ curl -X GET https://api.checkr.com/v1/candidates \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  post:
    description: >
      Creates a new Candidate resource.


      ### Required attributes


      The Candidate resource’s required attributes vary depending on its
      intended use. If this resource is to be used in conjunction with the
      Invitations API (in which the invitation apply form collects the
      Candidate's personal information), the only strictly required Candidate
      attribute is `email`.


      If this resource is to be used to generate any other report type, other
      personal information is also required.


      Attributes required to generate a Report include:

      - `first_name`

      - `middle_name` or `no_middle_name`

      - `last_name`

      - `dob`


      Attributes required to generate a Report with a criminal check screening:

      - `ssn`

      - `zipcode`


      Attributes required to generate a report with a Motor Vehicle Record (MVR)
      screening:

      - `driver_license_number`

      - `driver_license_state`


      Attributes recommended to generate a report with an Identity Document
      Verification screening:

      - `phone` (mobile phone number)


      Validation for these attributes is performed when requesting a Report, as
      the requirements depend on the Package.


      Checkr's product incorporates SSN field controls designed to not accept
      SSNs with the following characteristics:

        - SSNs without exactly 9 numeric characters
        - SSNs that start with 666 (666-34-3768)
        - SSNs that start with 9 (967-65-4325)
        - SSNs that are a single digit (111-11-1111)
        - SSNs that are sequential digits (123-45-6789)
    displayName: createCandidate
    responses:
      '200':
        description: Candidate was successfully created
        body:
          application/json:
            type: Candidate
      '400':
        description: Bad Request
        body:
          application/json:
            type: BadRequestError
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    body:
      application/json:
        type: object
        properties:
          copy_requested:
            description: >-
              If `true`, the candidate has asked to receive a copy of their
              report.
            default: false
            type: boolean
            required: false
          dob:
            description: Candidate’s date of birth.
            example: '1970-01-22'
            type: date-only
            required: false
          driver_license_number:
            description: Candidate’s driver license number.
            example: F211165
            type: string
            required: false
          driver_license_state:
            description: |
              Candidate’s driver license state of issue.
              Format: `ISO 3166-2:US`.
            example: CA
            type: string
            required: false
          email:
            description: |
              Candidate’s email address.
            example: john.smith@gmail.com
            type: string
            (oas-format): email
          first_name:
            description: |
              Candidate’s first name.
            minLength: 1
            pattern: '[a-zA-Z0-9 -''.,]*'
            example: John
            type: string
          geo_ids:
            description: Array of Geo IDs.
            type: array
            items:
              example: 79f943e212cce7de21c054a8
              type: string
            required: false
          id:
            type: ResourceId
            required: false
          last_name:
            description: Candidate’s last name.
            minLength: 1
            pattern: '[a-zA-Z0-9 -''.,]*'
            example: Smith
            type: string
          middle_name:
            description: >
              Candidate’s middle name. This field is required if
              `no_middle_name` is `false`.
            pattern: '[a-zA-Z0-9 -''.,]*'
            example: Alfred
            type: string
            required: false
          mother_maiden_name:
            description: |
              Candidate’s mother’s maiden name.
            pattern: '[a-zA-Z0-9 -''.,]*'
            example: Jones
            type: string
            required: false
          no_middle_name:
            description: >
              Required if no `middle_name` is provided. `true` if the candidate
              has no middle name.
            default: false
            type: boolean
            required: false
          object:
            type: string
            enum:
              - candidate
            (oas-readOnly): true
            required: false
          phone:
            description: Candidate’s phone number.
            example: '5555555555'
            type: string | nil
            required: false
          previous_driver_license_number:
            description: Candidate’s previous driver license number.
            example: F1501739
            type: string
            required: false
          previous_driver_license_state:
            description: |
              State that issued the candidate’s previous driver license.
              Format: `ISO 3166-2:US`.
            example: MD
            type: string
            required: false
          report_ids:
            description: Array of Report IDs.
            type: array
            items:
              example: 532e71cfe88a1d4e8d00000d
              type: string
            (oas-readOnly): true
            required: false
          ssn:
            description: >-
              Candidate’s Social Security Number. This value will be redacted in
              all return calls, except for the last four digits.
            example: XXX-XX-4645
            type: string
            required: false
          zipcode:
            description: Candidate’s 5-digit zip code.
            example: '90401'
            type: string
            required: false
        (oas-body-name): body
    securedBy:
      - basic_auth
    (oas-summary): Create a new Candidate
    (oas-tags):
      - Candidates
    (code-samples):
      - lang: curl
        source: |-
          $ curl -X POST https://api.checkr.com/v1/candidates \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
              -d first_name=John \
              -d middle_name=Alfred \
              -d last_name=Smith \
              -d email=john.smith@gmail.com \
              -d phone=5555555555 \
              -d zipcode=90401 \
              -d dob=1970-01-22 \
              -d ssn=847-43-4645 \
              -d driver_license_number=F211165 \
              -d driver_license_state=CA
              
  '/{candidate_id}':
    /documents:
      get:
        description: >
          Returns an array of candidate-provided Documents for the input
          `candidate_id`.
        displayName: getCandidateDocuments
        responses:
          '200':
            description: List of Documents
            body:
              application/json:
                type: object
                properties:
                  count:
                    example: 1
                    type: integer
                  data:
                    type: array
                    items:
                      type: Document
                  object:
                    description: A list
                    type: string
                    enum:
                      - list
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        queryParameters:
          types:
            description: >-
              The type of candidate-provided document to return. If `types` is
              not included in the call, all available Candidate Documents will
              be returned.
            type: array
            items:
              type: string
              enum:
                - consent
                - credit_report_consent_form
                - driver_license
                - driver_license_back
                - driver_license_history
                - education_proof
                - employment_proof
                - international_consent_form
                - passport
                - previous_driver_license
                - selfie
                - ssn_card
                - state_id_card
                - state_id_card_back
            (oas-collectionFormat): multi
            required: false
        securedBy:
          - basic_auth
        (oas-summary): List a Candidate's Documents
        (oas-tags):
          - Documents
        (code-samples):
          - lang: curl
            source: >
              $ curl -X GET
              https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/documents/
              \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
      post:
        description: Uploads a new Candidate Document.
        displayName: uploadDocument
        responses:
          '200':
            description: Document was successfully uploaded
            body:
              application/json:
                type: Document
          '400':
            description: Bad Request
            body:
              application/json:
                type: BadRequestError
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        body:
          multipart/form-data:
            properties:
              type:
                type: string
                enum:
                  - consent
                  - driver_license
                  - previous_driver_license
                  - state_id_card
                  - passport
                  - ssn_card
                  - selfie
                  - education_proof
                  - employment_proof
              file:
                description: >
                  Path to the document on your local file system.


                  Valid MIME types: `image/gif`, `image/jpg`, `image/jpeg`,
                  `image/png`, `image/bmp`, `image/tiff`, `application/pdf`,
                  `image/heic`.
                type: string
                (oas-format): binary
        securedBy:
          - basic_auth
        (oas-summary): Upload a new Candidate Document
        (oas-tags):
          - Documents
        (code-samples):
          - lang: curl
            source: >
              $ curl -X POST
              https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/documents
              \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                  --form type=driver_license \
                  --form file=@candidate_driver_license.jpg
    uriParameters:
      candidate_id:
        description: Upload a document for the input `candidate_id`.
        type: string
    /employers:
      get:
        description: |
          Returns a list of existing Employers for the input `candidate_id`.
        displayName: employersListByCandidate
        responses:
          '200':
            description: List of Employers
            body:
              application/json:
                type: object
                properties:
                  count:
                    example: 2
                    type: integer
                  data:
                    type: array
                    items:
                      type: Employer
                  object:
                    description: A list
                    type: string
                    enum:
                      - list
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        securedBy:
          - basic_auth
        (oas-summary): List existing Employers
        (oas-tags):
          - Employers
        (code-samples):
          - lang: curl
            source: >
              $ curl -X GET
              https://api.checkr.com//v1/candidates/e44aa283528e6fde7d542194/employers
              \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
      post:
        description: >
          Creates a new Employer resource.


          If the country is not US, the following parameters will be required in
          addition to those marked as required in the table below:


          - salary

          - address:
            - street
            - country
            - zipcode
          - manager:
            - name
            - title

          Validation for `start_date` and `end_date` is performed to ensure
          logical dates are provided. `end_date` must be after `start_date`, and
          both dates must be after 1900-01-01.
        displayName: createEmployer
        responses:
          '200':
            description: Employer was successfully created
            body:
              application/json:
                type: Employer
          '400':
            description: Bad Request
            body:
              application/json:
                type: BadRequestError
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        body:
          application/json:
            type: object
            properties:
              address:
                type: Address
              candidate_id:
                description: ID of the Candidate being screened.
                minLength: 1
                pattern: '[a-zA-Z0-9 -''.,]*'
                example: xxx
                type: string
                required: false
              contract_type:
                description: Candidate’s contract type.
                example: full_time
                type: string
                enum:
                  - full_time
                  - part_time
                  - contract
                  - internship
              do_not_contact:
                description: >-
                  If `true`, the employer will not be contacted about the
                  Candidate.
                default: false
                type: boolean
                required: false
              employer_url:
                description: Employer’s website.
                example: www.employer.com
                type: string
                required: false
              end_date:
                description: Candidate’s end date with the employer.
                example: '2017-05-01'
                type: date-only
                required: false
              id:
                type: ResourceId
                required: false
              manager:
                type: object
                properties:
                  email:
                    description: Candidate's manager's email address.
                    example: joesmith@checkr.co
                    type: string
                  name:
                    description: Candidate's manager's name.
                    example: Joe Smith
                    type: string
                  phone:
                    description: Candidate's manager's phone number.
                    example: 212-555-1234
                    type: string
                  title:
                    description: Candidate's manager's title.
                    example: Engineering Manager
                    type: string
                required: false
              name:
                description: Candidate’s employer’s name.
                minLength: 1
                pattern: '[a-zA-Z0-9 -''.,]*'
                example: Checkr
                type: string
              object:
                type: string
                enum:
                  - employer
                (oas-readOnly): true
                required: false
              position:
                description: Candidate’s position or title.
                example: Software Engineer
                type: string
              salary:
                description: Candidate’s gross salary in dollars annually.
                example: 10000
                type: integer
                required: false
              start_date:
                description: Candidate’s start date with the employer.
                example: '2016-06-01'
                type: date-only
            (oas-body-name): body
        securedBy:
          - basic_auth
        (oas-summary): Create a new Employer
        (oas-tags):
          - Employers
        (code-samples):
          - lang: curl
            source: >
              $ curl -X POST
              https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/employers
              \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                  -d name=Checkr \
                  -d position=Engineer \
                  -d salary=10000 \
                  -d address\[street\]=123+Main+St. \
                  -d address\[city\]=San+Francisco \
                  -d address\[state\]=CA \
                  -d address\[zipcode\]=94108 \
                  -d address\[country\]=US \
                  -d contract_type=full_time \
                  -d start_date=2016-01-22 \
                  -d end_date=2017-01-22 \
                  -d manager\[name\]=Joe \
                  -d manager\[title\]=Manager \
                  -d employer_url=www.employer.com
      '/{employer_id}':
        delete:
          description: |
            Deletes an existing Employer with the input `id`.
          displayName: employerDelete
          responses:
            '200':
              description: Employer was successfully deleted
              body:
                application/json:
                  type: Employer
            '400':
              description: Bad Request
              body:
                application/json:
                  type: BadRequestError
            '401':
              description: Unauthorized
              body:
                application/json:
                  type: UnauthorizedError
            '403':
              description: Forbidden
              body:
                application/json:
                  type: ForbiddenError
          securedBy:
            - basic_auth
          (oas-summary): Delete an existing Employer
          (oas-tags):
            - Employers
          (code-samples):
            - lang: curl
              source: >
                $ curl -X DELETE
                https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/employers/95a95172bb81143ed44e403c
                \
                    -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
        get:
          description: >
            Returns an existing Employer with the input `candidate_id` or
            `employer_id`.
          displayName: getEmployer
          responses:
            '200':
              description: Employer details
              body:
                application/json:
                  type: Employer
            '401':
              description: Unauthorized
              body:
                application/json:
                  type: UnauthorizedError
            '403':
              description: Forbidden
              body:
                application/json:
                  type: ForbiddenError
          securedBy:
            - basic_auth
          (oas-summary): Retrieve an existing Employer
          (oas-tags):
            - Employers
          (code-samples):
            - lang: curl
              source: >
                $ curl -X GET
                https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/employers/ca27df84be5b50dfa7ee1cda
                \
                    -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
        uriParameters:
          employer_id:
            description: The Employer's ID.
            type: string
    /schools:
      get:
        description: |
          Returns a list of existing Schools for the input `candidate_id`.
        displayName: schoolsListByCandidate
        responses:
          '200':
            description: List of Schools
            body:
              application/json:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: School
                  next_href:
                    type: string
                    (oas-format): uri
                  object:
                    description: A list
                    type: string
                    enum:
                      - list
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        securedBy:
          - basic_auth
        (oas-summary): List existing Schools
        (oas-tags):
          - Schools
        (code-samples):
          - lang: curl
            source: >
              $ curl -X GET
              https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/schools/fe8b5a63af2799aba7fdf64d
              \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
      post:
        description: >
          Creates a new School resource.


          Validation for `start_date` and `end_date` is performed to ensure
          logical dates are provided. `end_date` must be after `start_date`, and
          both dates must be after 1900-01-01.


          If the country is not US, the following parameters are required in
          addition to those marked as required below:


          - year_awarded

          - phone

          - minor

          - start_date

          - end_date

          - current

          - address
            - street
            - city
            - zipcode
            - state
            - country
        displayName: createSchoolForCandidate
        responses:
          '200':
            description: School was successfully created
            body:
              application/json:
                type: School
          '400':
            description: Bad Request
            body:
              application/json:
                type: BadRequestError
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        body:
          application/json:
            type: object
            properties:
              address:
                type: Address
                required: false
              candidate_id:
                description: Candidate linked to this School resource.
                minLength: 1
                pattern: '[a-zA-Z0-9 -''.,]*'
                example: 83ebeagdec0948690863766f792ead24d61fe3f9
                type: string
                required: false
              current:
                description: Defines whether the Candidate is currently enrolled.
                default: false
                type: boolean
                required: false
              degree:
                description: Degree awarded to the Candidate.
                example: BA
                type: string
              end_date:
                description: Candidate’s end date with the School.
                example: '2017-05-10'
                type: date-only
                required: false
              id:
                type: ResourceId
                required: false
              major:
                description: Candidate’s major.
                pattern: '[a-zA-Z0-9 -''.,]*'
                example: Russian Literature
                type: string
              minor:
                description: Candidate’s minor.
                example: Background Checks
                type: string
                required: false
              name:
                description: Name of the School.
                minLength: 1
                pattern: '[a-zA-Z0-9 -''.,]*'
                example: College University
                type: string
              object:
                type: string
                enum:
                  - school
                (oas-readOnly): true
                required: false
              phone:
                description: School's phone number.
                example: 415-111-1111
                type: string | nil
                required: false
              school_url:
                description: School’s website.
                example: www.collegeuniversity.com
                type: string
                required: false
              start_date:
                description: Candidate’s start date with the School.
                example: '2012-09-22'
                type: date-only
                required: false
              year_awarded:
                description: Year in which the degree was awarded.
                example: 2017
                type: integer
                required: false
            (oas-body-name): body
        securedBy:
          - basic_auth
        (oas-summary): Create a new School
        (oas-tags):
          - Schools
        (code-samples):
          - lang: curl
            source: >
              $ curl -X POST
              https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/schools
              \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                  -d name=College\ University \
                  -d address\[street\]=1+Circle+Avenue \
                  -d address\[city\]=San+Francisco \
                  -d address\[zipcode\]=94105 \
                  -d address\[state\]=CA \
                  -d address\[country\]=US \
                  -d degree=BS \
                  -d year_awarded=2017 \
                  -d major=Computer+Science \
                  -d phone=111-111-1111 \
                  -d minor=Background+Checks \
                  -d start_date=2012-09-25 \
                  -d end_date=2017-05-29 \
                  -d current=false \
                  -d school_url=www.school.com
      '/{id}':
        delete:
          description: |
            Deletes an existing School with the input `school_id`.
          displayName: schoolDelete
          responses:
            '200':
              description: School was successfully deleted
              body:
                application/json:
                  type: School
            '400':
              description: Bad Request
              body:
                application/json:
                  type: BadRequestError
            '401':
              description: Unauthorized
              body:
                application/json:
                  type: UnauthorizedError
            '403':
              description: Forbidden
              body:
                application/json:
                  type: ForbiddenError
          securedBy:
            - basic_auth
          (oas-summary): Delete an existing School
          (oas-tags):
            - Schools
          (code-samples):
            - lang: curl
              source: >
                $ curl -X DELETE
                https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/schools/95a95172bb81143ed44e403c
                \
                    -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
        get:
          description: |
            Returns an existing School with the input `school_id`.
          displayName: getSchool
          responses:
            '200':
              description: School details
              body:
                application/json:
                  type: School
            '401':
              description: Unauthorized
              body:
                application/json:
                  type: UnauthorizedError
            '403':
              description: Forbidden
              body:
                application/json:
                  type: ForbiddenError
          securedBy:
            - basic_auth
          (oas-summary): Retrieve an existing School
          (oas-tags):
            - Schools
          (code-samples):
            - lang: curl
              source: >
                $ curl -X GET
                https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/schools/fe8b5a63af2799aba7fdf64d
                \
                    -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
        uriParameters:
          id:
            description: The School's ID.
            type: string
  '/{id}':
    get:
      description: |
        Retrieves an existing Candidate.
      displayName: getCandidate
      responses:
        '200':
          description: Candidate details
          body:
            application/json:
              type: Candidate
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Retrieve an existing Candidate
      (oas-tags):
        - Candidates
      (code-samples):
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    post:
      description: >
        Updates an existing Candidate.


        Attempts to update a field that cannot be updated will return a 400
        error stating "... cannot be updated”. For example, attempting to update
        an SSN will return 400 stating "Candidate SSN can not be updated because
        it has reports”. 


        Updating `geo_ids` will **replace** all existing Geos. To keep existing
        geos, include their IDs in the update request. 


        Only fields with `null` values can be updated after a Report has been
        ordered for a Candidate with the exception of the following fields:

        - email

        - previous_driver_license_number

        - previous_driver_license_state

        - copy_requested

        - custom_id

        - geo_ids
      displayName: updateCandidate
      responses:
        '200':
          description: Candidate was successfully updated
          body:
            application/json:
              type: Candidate
        '400':
          description: Bad Request
          body:
            application/json:
              type: BadRequestError
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      body:
        application/json:
          type: Candidate
          (oas-body-name): body
      securedBy:
        - basic_auth
      (oas-summary): Update an existing Candidate
      (oas-tags):
        - Candidates
      (code-samples):
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d first_name=John \
                -d middle_name=Alfred \
                -d last_name=Smith \
                -d email=john.smith@gmail.com \
                -d phone=5555555555 \
                -d zipcode=90401 \
                -d dob=1970-01-22 \
                -d ssn=543-43-4645 \
                -d 'geo_ids[]=87f5bb4983eade22c55f4731&geo_ids[]=22b20140fc1adfae693ca35c'
    uriParameters:
      id:
        description: The Candidate's ID.
        type: string
    /pii:
      delete:
        description: >
          Requests the removal of PII from an existing Candidate


          Requesting the removal of PII from a candidate who has already had PII
          removed will result in an error.
        displayName: deleteCandidate
        responses:
          '200':
            description: Candidate details
            body:
              application/json:
                type: Candidate
          '400':
            description: Bad Request
            body:
              application/json:
                type: BadPiiRequestError
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        body:
          application/json:
            type: object
            properties:
              deletion_contact_email_address:
                description: Email address of person requesting candidate's PII removal.
                example: john.smith@gmail.com
                type: string
              deletion_contact_first_name:
                description: First name of person requesting candidate's PII removal.
                example: John
                type: string
                required: false
              deletion_contact_last_name:
                description: Last name of person requesting candidate's PII removal.
                example: Smith
                type: string
                required: false
            (oas-body-name): body
        securedBy:
          - basic_auth
        (oas-summary): Request PII removal for a Candidate
        (oas-tags):
          - Candidates
  uriParameters:
    id:
      description: The Candidate's ID.
      type: string
/geos:
  get:
    description: |
      Returns a list of existing Geos with the input `name` or `state`.
    displayName: geosList
    responses:
      '200':
        description: List of Geos
        body:
          application/json:
            type: object
            properties:
              count:
                example: 1
                type: integer
              data:
                type: array
                items:
                  type: Geo
              next_href:
                type: string
                (oas-format): uri
              object:
                description: A list
                type: string
                enum:
                  - list
              previous_href:
                type: string
                (oas-format): uri
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    queryParameters:
      name:
        description: Returns all Geos with the input `name`.
        type: string
        required: false
      state:
        description: Returns all Geos with the input state.
        type: string
        required: false
    securedBy:
      - basic_auth
    (oas-summary): List existing Geos
    (oas-tags):
      - Geos
    (code-samples):
      - lang: curl
        source: |
          $ curl -X GET https://api.checkr.com/v1/geos \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  post:
    description: >
      Creates a new Geo resource.


      **Note**: Attempting to create a new Geo with the same name/state
      combination will result in an

      409 error
    displayName: createGeo
    responses:
      '201':
        description: Geo was successfully created
        body:
          application/json:
            type: Geo
      '400':
        description: Bad Request
        body:
          application/json:
            type: BadRequestError
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
      '409':
        description: Duplicate geo
        body:
          application/json:
            type: DuplicateGeoError
    body:
      application/json:
        type: object
        properties:
          city:
            description: A major city within the input state.
            example: San Francisco
            type: string
            required: false
          name:
            description: Human-readable name of the Geo.
            example: San Francisco
            type: string
          state:
            description: US state for the Geo.
            example: CA
            type: string
        (oas-body-name): body
    securedBy:
      - basic_auth
    (oas-summary): Create a new Geo
    (oas-tags):
      - Geos
    (code-samples):
      - lang: curl
        source: |
          $ curl -X POST https://api.checkr.com/v1/geos \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
              -d name=San+Francisco \
              -d city=San+Francisco \
              -d state=CA
  '/{id}':
    delete:
      description: |
        Deletes an existing Geo.
      displayName: deleteGeo
      responses:
        '204':
          description: Geo was successfully deleted
          body:
            application/json:
              type: Geo
        '400':
          description: Bad Request
          body:
            application/json:
              type: BadRequestError
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
        '409':
          description: Geo used
          body:
            application/json:
              type: UsedGeoError
      securedBy:
        - basic_auth
      (oas-summary): Delete an existing Geo
      (oas-tags):
        - Geos
      (code-samples):
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/geos/b719804dc15c655f8529a2f2 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    get:
      description: |
        Returns an existing Geo with the input ID.
      displayName: getGeo
      responses:
        '200':
          description: Geo details
          body:
            application/json:
              type: Geo
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Retrieve an existing Geo
      (oas-tags):
        - Geos
      (code-samples):
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/geos/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    post:
      description: |
        Updates an existing Geo resource with the input `city`.
        `city` can only be added once.
      displayName: updateGeo
      responses:
        '200':
          description: Geo was successfully updated
          body:
            application/json:
              type: Geo
        '400':
          description: Bad Request
          body:
            application/json:
              type: BadRequestError
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
        '409':
          description: Geo city updated
          body:
            application/json:
              type: GeoCityUpdatedError
      body:
        application/json:
          type: object
          properties:
            city:
              description: Updates the Geo with the input city.
              example: San Francisco
              type: string | nil
          (oas-body-name): body
      securedBy:
        - basic_auth
      (oas-summary): Update an existing Geo
      (oas-tags):
        - Geos
      (code-samples):
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/geos/b719804dc15c655f8529a2f2 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d city=San+Francisco
    uriParameters:
      id:
        description: ID of the Geo.
        type: string
/hierarchy:
  get:
    description: >
      Retrieves the current Hierarchy for the Account.


      Use `GET /hierarchy` to return the hierarchy in its entirety, or from a
      specific

      node to its children. The returned JSON object will include the Packages

      assigned to each node in the dashboard. This is useful for building

      UIs that truncate the list of Packages displayed to a requester, or

      display only the nodes that are relevant to the requester.


      Output is arranged hierarchically, with child nodes accessible through the
      parent node.
    displayName: getAccountHierarchy
    responses:
      '200':
        description: The hierarchy for the account.
        body:
          application/json:
            type: object
            properties:
              nodes:
                type: array
                items:
                  type: HierarchyTree
              sync_id:
                description: >-
                  The `uri_name` of the Account, plus a randomly generated
                  hexadecimal ID, linked with a hyphen.
                example: account-da78fa2cd1e6ebee4b5975aa
                type: string
              time:
                description: The date and time at which the ingestion job began.
                example: '2020-01-01T08:00:00Z'
                type: datetime
      '403':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '404':
        description: Not Found
        body:
          application/json:
            type: HierarchyNotFoundError
    queryParameters:
      node_custom_ids:
        description: >-
          An array of `custom_ids` for the nodes to return. Returns the
          portion(s) of the Account Hierarchy matching the input nodes and their
          descendants.
        type: array
        items:
          type: string
        (oas-collectionFormat): multi
        required: false
    securedBy:
      - basic_auth
    (oas-summary): Retrieve Hierarchy
    (oas-tags):
      - Hierarchy (Enabled by request)
    (code-samples):
      - lang: curl
        source: |
          $ curl https://api.checkr.com/v1/hierarchy \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  post:
    description: >
      Creates a new or replaces an existing Account Hierarchy.


      The Hierarchy endpiont performs ingestion asynchronously. Check the status

      of the ingestion by calling `GET /v1/hierarchy/status`. Once ingested, use
      the Checkr Dashboard to assign your nodes to Packages, PAMs, and Users.
    displayName: updateAccountHierarchy
    responses:
      '202':
        description: Ingestion successfully initiated
        body:
          application/json:
            type: object
            properties:
              sync_id:
                description: >-
                  The `uri_name` of the Account, plus a randomly generated
                  hexadecimal ID, linked with a hyphen.
                example: account-da78fa2cd1e6ebee4b5975aa
                type: string
              time:
                description: The date and time at which the ingestion job began.
                example: '2020-02-11T00:27:14Z'
                type: datetime
      '400':
        description: Bad Request
        body:
          application/json:
            type: BadHierarchyRequestError
      '403':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '423':
        description: Ingestion already in progress
        body:
          application/json:
            type: IngestionInProgressError
    body:
      application/json:
        type: object
        properties:
          nodes:
            type: array
            items:
              type: HierarchyNode
        (oas-body-name): body
    securedBy:
      - basic_auth
    (oas-summary): Create Hierarchy
    (oas-tags):
      - Hierarchy (Enabled by request)
    (code-samples):
      - lang: curl
        source: |
          $ curl -X POST https://api.checkr.com/v1/hierarchy \
              -H 'Content-Type: application/json' \
              -u d3a265269d18997528b04cfa82bc6a108c1b8553: \
              -d '{ "nodes": [{"name":"Acme Staffing", "tier": "department", "custom_id": "zpy8orej4r614ize"}, {"name":"Drivers Staffing", "tier": "divison", "custom_id": "ocquzig4k3whppfx", "parent_custom_id": "zpy8orej4r614ize"}]}'
  /status:
    get:
      description: >
        Returns the status of the latest Hierarchy ingestion request.


        This call requires no input, and is provided as a means to determine the
        progress of an

        asynchronous `POST /hierarchy` request.
      displayName: getAccountHierarchyStatus
      responses:
        '200':
          description: The current status of hierarchy ingestion.
          body:
            application/json:
              type: object
              properties:
                hierarchy_pending:
                  description: >-
                    If `true`, a hierarchy ingestion request is currently
                    processing.
                  type: boolean
                hierarchy_present:
                  description: 'If `true`, a valid hierarchy exists for the account.'
                  example: true
                  type: boolean
                latest_ingestion:
                  type: object
                  properties:
                    errors:
                      description: >-
                        All error messages produced by the last hierarchy
                        ingestion request.
                      example:
                        - 'Row 1: Validation failed: Name required'
                      type: array
                      items:
                        type: string
                    successful:
                      description: >-
                        If `true`, the last hierarchy ingestion request
                        contained no errors.
                      type: boolean
                    sync_id:
                      description: >-
                        The `sync_id` of the last fully-processed ingestion
                        request. `null` if no requests have processed.
                      example: account-da78fa2cd1e6ebee4b5975aa
                      type: string
                    time:
                      description: >-
                        The date and time of the start of the last
                        fully-processed ingestion request. `null` if no requests
                        have processed.
                      example: '2020-01-01T08:00:00Z'
                      type: datetime
        '403':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
      securedBy:
        - basic_auth
      (oas-summary): Retrieve Hierarchy update status
      (oas-tags):
        - Hierarchy (Enabled by request)
      (code-samples):
        - lang: curl
          source: |
            $ curl https://api.checkr.com/v1/hierarchy/status \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
/invitations:
  get:
    description: >
      Returns a list of existing Invitations with the input `status` or
      `candidate_id`.


      * If no parameters are passed, returns all Invitations.


      * If `candidate_id` or `status` is passed, returns Invitations that match
      the input parameter.


      * If both `candidate_id` and `status` are passed, return Invitations that
      match both parameters.


      Returns 400 if the (optional) `status` parameter is not `pending`,
      `expired`, or `completed`.
    displayName: listOfInvitations
    responses:
      '200':
        description: List of Invitations
        body:
          application/json:
            type: object
            properties:
              count:
                example: 2
                type: integer
              data:
                type: array
                items:
                  type: Invitation
              object:
                description: A list
                type: string
                enum:
                  - list
      '400':
        description: Bad Request
        body:
          application/json:
            type: BadRequestError
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    queryParameters:
      candidate_id:
        description: ID of the candidate to whom the invitation was issued.
        type: string
        required: false
      status:
        description: Status of the Invitation.
        type: string
        enum:
          - pending
          - completed
          - expired
        required: false
    securedBy:
      - basic_auth
    (oas-summary): List existing Invitations
    (oas-tags):
      - Invitations
    (code-samples):
      - lang: curl
        source: |
          $ curl -X GET https://api.checkr.com/v1/invitations \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
              -d status=pending
  post:
    description: |
      Creates a new Invitation resource.
    displayName: createInvitation
    responses:
      '200':
        description: Invitation was successfully created
        body:
          application/json:
            type: Invitation
      '400':
        description: Bad Request
        body:
          application/json:
            type: BadRequestError
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    body:
      application/json:
        type: object
        properties:
          tags:
            description: Array of tags for the Report.
            type: array
            items:
              type: string
            required: false
          candidate_id:
            description: ID of the Candidate for whom the Invitation is created.
            example: 551564b7865af96a28b13f36
            type: string
          node:
            description: |
              <font color="red">Required</font> for hierarchy-enabled accounts.

              `custom_id` of the associated node.
            type: string
            required: false
          package:
            description: Values dependent on your Account settings.
            example: driver_pro
            type: string
          work_locations:
            description: >
              <font color="red">Required</font> for hierarchy-enabled accounts.


              Array of City and State key-value pairs. State is required; city
              is optional.
            type: array
            items:
              type: WorkLocation
            required: false
        (oas-body-name): body
    securedBy:
      - basic_auth
    (oas-summary): Create a new Invitation
    (oas-tags):
      - Invitations
    (code-samples):
      - lang: curl
        source: |
          $ curl -X POST https://api.checkr.com/v1/invitations \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
              -d candidate_id=e44aa283528e6fde7d542194 \
              -d package=driver_pro
  '/{id}':
    delete:
      description: |
        Cancels an existing Invitation.
      displayName: cancelInvitation
      responses:
        '200':
          description: Invitation was successfully canceled
          body:
            application/json:
              type: Invitation
        '400':
          description: Bad Request
          body:
            application/json:
              type: BadRequestError
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Cancel an existing Invitation
      (oas-tags):
        - Invitations
      (code-samples):
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/invitations/4722c07dd9a10c3985ae432a \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9
    get:
      description: |
        Returns an existing Invitation with the input ID.
      displayName: getInvitation
      responses:
        '200':
          description: Invitation details
          body:
            application/json:
              type: Invitation
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Retrieve an existing Invitation
      (oas-tags):
        - Invitations
      (code-samples):
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/invitations/3c0a0ca94caaab6ca9634f76 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    uriParameters:
      id:
        description: The Invitation's ID.
        type: string
/packages:
  get:
    description: |
      Returns a list of all existing Packages.
    displayName: packagesList
    responses:
      '200':
        description: List of Packages
        body:
          application/json:
            type: object
            properties:
              count:
                example: 2
                type: integer
              data:
                type: array
                items:
                  type: Package
              next_href:
                type: string
                (oas-format): uri
              object:
                description: A list
                type: string
                enum:
                  - list
              previous_href:
                type: string
                (oas-format): uri
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): List existing Packages
    (oas-tags):
      - Packages
    (code-samples):
      - lang: curl
        source: |
          $ curl -X GET https://api.checkr.com/v1/packages \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/{id}':
    delete:
      description: |
        Deletes an existing Package.
      displayName: deletePackage
      responses:
        '200':
          description: Package was successfully deleted
          body:
            application/json:
              type: Package
        '400':
          description: Bad Request
          body:
            application/json:
              type: BadRequestError
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Delete an existing Package
      (oas-tags):
        - Packages
      (code-samples):
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/packages/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    get:
      description: |
        Returns an existing Package with the input ID.
      displayName: getPackage
      responses:
        '200':
          description: Package details
          body:
            application/json:
              type: Package
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Retrieve an existing Package
      (oas-tags):
        - Packages
      (code-samples):
        - lang: curl
          source: |
            $ curl -X GET https://api.checkr.com/v1/packages \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    uriParameters:
      id:
        description: ID of the Package to retrieve.
        type: string
/programs:
  get:
    description: |
      Returns a list of existing Programs with the input `name`.
    displayName: programsList
    responses:
      '200':
        description: List of Programs
        body:
          application/json:
            type: object
            properties:
              count:
                example: 1
                type: integer
              data:
                type: array
                items:
                  type: Program
              object:
                description: A list
                type: string
                enum:
                  - list
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    queryParameters:
      name:
        description: Returns Programs with the input `name`.
        type: string
        required: false
    securedBy:
      - basic_auth
    (oas-summary): List existing Programs
    (oas-tags):
      - Programs
    (code-samples):
      - lang: curl
        source: |
          $ curl -X GET https://api.checkr.com/v1/programs \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/{id}':
    get:
      description: |
        Returns an existing Program with the input ID.
      displayName: getProgram
      responses:
        '200':
          description: Program details
          body:
            application/json:
              type: Program
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Retrieve an existing Program
      (oas-tags):
        - Programs
      (code-samples):
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/programs/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    uriParameters:
      id:
        description: ID of the Program to retrieve.
        type: string
/reports:
  post:
    description: >
      Creates a new Report resource.


      <b>Note: </b>Credit Checks require a complete Candidate address, and may
      not be

      initiated using the `/reports` API. Please use the [`/invitations`
      API](#tag/invitations) to initiate the Checkr Hosted

      Invitation Flow to order Credit Checks for your Candidates.


      Requirements for Accounts using Checkr's Account Hierarchy Management APIs
      are called out in the definition for the required flags.
    displayName: createReport
    responses:
      '200':
        description: Report was successfully created
        body:
          application/json:
            type: Report
      '400':
        description: Bad Request
        body:
          application/json:
            type: BadRequestError
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    body:
      application/json:
        properties:
          tags:
            description: Array of tags for the Report.
            type: array
            items:
              type: string
          candidate_id:
            description: ID of the Candidate screened.
            example: e44aa283528e6fde7d542194
            type: string
          node:
            description: |
              <font color="red">Required</font> for hierarchy-enabled accounts.

              `custom_id` of the associated node.
            type: string
          package:
            description: >
              <font color="red">NOT</font> required for hierarchy-enabled
              accounts.


              Name of the Package.

              Example: `driver_pro`
            type: string
          work_locations:
            description: >
              <font color="red">Required</font> for hierarchy-enabled accounts.


              Array of City and State key-value pairs. State is required; city
              is optional.
            type: array
            items:
              type: WorkLocation
        (oas-body-name): body
    securedBy:
      - basic_auth
    (oas-summary): Create a new Report
    (oas-tags):
      - Reports
    (code-samples):
      - lang: curl
        source: |
          $ curl -X POST https://api.checkr.com/v1/reports \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
              -d package=driver_pro \
              -d candidate_id=e44aa283528e6fde7d542194
  '/{id}':
    get:
      description: |
        Returns an existing Report with the input ID.
      displayName: getReport
      responses:
        '200':
          description: Report details
          body:
            application/json:
              type: Report
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      queryParameters:
        include:
          description: >-
            Comma delimitated string indicating how to populate the returned
            Report object. See [Embedding
            Resources](#section/Reference/Embedding-Resources).
          required: false
          type: string
          enum:
            - arrest_search
            - candidate
            - candidate_stories
            - county_civil_searches
            - county_criminal_searches
            - credit_report
            - dispute_comments
            - documents
            - drug_screening
            - education_verification
            - employment_verification
            - eviction_search
            - facis_search
            - federal_civil_search
            - federal_criminal_search
            - geos
            - global_watchlist_search
            - identity_document_verification
            - international_criminal_searches
            - motor_vehicle_report
            - municipal_criminal_searches
            - national_criminal_search
            - personal_reference_verifications
            - photo_verification
            - pointer_state_criminal_searches
            - professional_reference_verifications
            - program
            - public_comments
            - self_disclosures
            - sex_offender_search
            - ssn_trace
            - state_criminal_searches
            - terrorist_watchlist_search
          (example): '?include=candidate,drug_screening'
      securedBy:
        - basic_auth
      (oas-summary): Retrieve an existing Report
      (oas-tags):
        - Reports
      (code-samples):
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a?include=drug_screening
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    post:
      description: >
        Updates the Package or adjudication for an existing Report resource.


        Reports which include the Candidate's Social Security Number may be
        updated using this endpoint. To update a Report which does not include
        an SSN, first use the [update Candidate](#operation/updateCandidate)
        request to add the candidate’s SSN before updating the report. Attempts
        to update a report that is missing an SSN will result in a 400 error
        “Candidate must have SSN to upgrade report.”


        Either `package` or `adjudication` is required.


        <div class="alert alert-info">

          **Note**: The Package of a Report cannot be updated if it has an Adverse Action with the status: `complete` or `dispute`. To proceed, cancel the Adverse Action or create a new Report.

        </div>
      displayName: updateReport
      responses:
        '200':
          description: Report was successfully updated
          body:
            application/json:
              type: Report
        '400':
          description: Pre-existing Adverse Action
          body:
            application/json:
              type: PreExistingAdverseActionError
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      body:
        application/json:
          type: object
          properties:
            adjudication:
              example: engaged
              type: string
              enum:
                - engaged
                - pre_adverse_action
                - post_adverse_action
            package:
              description: |
                Short name of the Package.
              example: driver_pro
              type: string
          (oas-body-name): body
      securedBy:
        - basic_auth
      (oas-summary): Update an existing Report
      (oas-tags):
        - Reports
      (code-samples):
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d package=driver_pro
    uriParameters:
      id:
        description: The Report's ID.
        type: string
    /eta:
      get:
        description: |
          Returns an existing Report ETA for the input Report ID.
        displayName: requestReportETA
        responses:
          '200':
            description: Report ETA
            body:
              application/json:
                type: ReportETA
          '400':
            description: Bad Request
            body:
              application/json:
                type: BadRequestError
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
          '404':
            description: Unavailable
            body:
              application/json:
                type: PredictionUnavailable
        securedBy:
          - basic_auth
        (oas-summary): Retrieve a Report's ETA
        (oas-tags):
          - Report ETA
        (code-samples):
          - lang: curl
            source: >
              curl -X GET
              https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/eta \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    /tags:
      delete:
        description: |
          This request is used to delete a tag from a Report.
        displayName: deleteTagFromReport
        responses:
          '200':
            description: Report tags were successfully deleted
            body:
              application/json:
                type: object
                properties:
                  count:
                    example: 1
                    type: number
                    (oas-format): integer
                  data:
                    example:
                      - name: To Review
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                  object:
                    example: list
                    type: string
                    enum:
                      - list
          '400':
            description: Bad Request
            body:
              application/json:
                type: BadRequestError
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        body:
          application/json:
            type: object
            properties:
              tag:
                example: West Coast
                type: string
            (oas-body-name): body
        securedBy:
          - basic_auth
        (oas-summary): Delete a tag from a Report
        (oas-tags):
          - Report Tags
        (code-samples):
          - lang: curl
            source: >
              curl -X DELETE
              https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/tags \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                  -d tag=West+Coast
      get:
        description: |
          Retrieves tags for the input Report.
        displayName: getTagsForReport
        responses:
          '200':
            description: List of report tags.
            body:
              application/json:
                type: ReportTags
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        securedBy:
          - basic_auth
        (oas-summary): Retrieve tags for a Report
        (oas-tags):
          - Report Tags
        (code-samples):
          - lang: curl
            source: >
              curl -X GET
              https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/tags \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
      post:
        description: >
          This request is used to add a tag to a Report.

          <p><b>Note: </b>The <code>tag</code> value passed to <code>POST
          /v1/reports/{id}/tags</code> will match the <code>name</code> field in
          the response.</p>
        displayName: addTagToReport
        responses:
          '200':
            description: Report tag was successfully created
            body:
              application/json:
                type: object
                properties:
                  count:
                    example: 3
                    type: number
                    (oas-format): integer
                  data:
                    example:
                      - name: EIN-234234234
                      - name: api-generated
                      - name: In Progress
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                  object:
                    example: list
                    type: string
                    enum:
                      - list
          '400':
            description: Bad Request
            body:
              application/json:
                type: BadRequestError
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        body:
          application/json:
            type: object
            properties:
              tag:
                example: To Review
                type: string
            (oas-body-name): body
        securedBy:
          - basic_auth
        (oas-summary): Add a tag to a Report
        (oas-tags):
          - Report Tags
        (code-samples):
          - lang: curl
            source: >
              curl -X POST
              https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/tags \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                  -d tag=In+Progress
      put:
        description: |
          This request is used to define all tags for a Report.
        displayName: updateTagsForReport
        responses:
          '200':
            description: Report tags were successfully updated
            body:
              application/json:
                type: object
                properties:
                  count:
                    example: 2
                    type: number
                    (oas-format): integer
                  data:
                    example:
                      - name: West Coast
                      - name: To Review
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                  object:
                    example: list
                    type: string
                    enum:
                      - list
          '400':
            description: Bad Request
            body:
              application/json:
                type: BadRequestError
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        body:
          application/json:
            type: object
            properties:
              tags:
                type: array
                items:
                  example: To Review
                  type: string
            (oas-body-name): body
        securedBy:
          - basic_auth
        (oas-summary): Update tags for a Report
        (oas-tags):
          - Report Tags
        (code-samples):
          - lang: curl
            source: >
              curl -X PUT
              https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/tags \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                  -d tags[]=West+Coast \
                  -d tags[]=To+Review
  '/{report_id}':
    /addresses:
      get:
        description: This request is used to retrieve addresses for a given Report.
        displayName: addressesListByReport
        responses:
          '200':
            description: List of Report addresses
            body:
              application/json:
                type: object
                properties:
                  count:
                    example: 1
                    type: integer
                  data:
                    type: array
                    items:
                      type: ReportAddresses
                  object:
                    description: A list
                    type: string
                    enum:
                      - list
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        securedBy:
          - basic_auth
        (oas-summary): List existing Report addresses
        (oas-tags):
          - Report Addresses
        (code-samples):
          - lang: curl
            source: >
              $ curl -X GET
              https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/addresses
              \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    uriParameters:
      report_id:
        description: Returns the list of Report addresses for the input `report_id`.
        type: string
    /adverse_items:
      get:
        description: >
          Returns a list of existing Adverse Items with the input `report_id`.


          <b>Note: </b>Report must be in a `consider` status and cannot have any
          existing Adverse Actions that have not been canceled.


          Returns 400 if the Report's status is not Consider or the Report
          already has an active (non-cancelled) Adverse Action.
        displayName: adverseItemsByReport
        responses:
          '200':
            description: List of Adverse Items
            body:
              application/json:
                type: object
                properties:
                  count:
                    example: 1
                    type: integer
                  data:
                    type: array
                    items:
                      type: AdverseItem
                  object:
                    description: A list
                    type: string
                    enum:
                      - list
          '400':
            description: Bad Request
            body:
              application/json:
                type: BadRequestError
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        securedBy:
          - basic_auth
        (oas-summary): List existing Adverse Items
        (oas-tags):
          - Adverse Items
        (code-samples):
          - lang: curl
            source: >
              $ curl -X GET
              https://api.checkr.com/v1/reports/b861a56db1b1b89692dd6118/adverse_items
              \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    /candidate_stories:
      post:
        description: |
          Create a new Candidate Story for the input `report_id`.
        displayName: createCandidateStory
        responses:
          '200':
            description: Candidate Story was successfully created
            body:
              application/json:
                type: CandidateStory
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        body:
          application/json:
            type: object
            properties:
              content:
                description: Additional information provided by Candidate.
                example: >-
                  Since my case, I have received the following certifications
                  (see attachments)
                type: string
              documents:
                description: >-
                  An array of documents to attach to the Candidate Story. Can be
                  empty.
                type: array
                items:
                  type: object
                  properties:
                    filename:
                      description: File name
                      example: evidence_of_rehab.pdf
                      type: string
                    tempfile:
                      description: >-
                        Accessible resource from which the document will be
                        copied.
                      example: 'https://tempfilebucket.aws.example.com/abYwtudnakfnafl'
                      type: string
                    type:
                      description: Document MIME type
                      example: application/pdf
                      type: string
                      enum:
                        - application/pdf
                        - image/bmp
                        - image/gif
                        - image/heic
                        - image/jpeg
                        - image/jpg
                        - image/png
                        - image/tiff
              record_id:
                description: >
                  ID of the Record existing on a Screening to which the
                  Candidate Story is linked.

                  When no record ID is provided, the Candidate Story is
                  considered General Information.
                example: af3393b7d751206c7c67b6e5
                type: string
                required: false
            (oas-body-name): body
        securedBy:
          - basic_auth
        (oas-summary): Create a new Candidate Story
        (oas-tags):
          - Candidate Stories
    /verifications:
      get:
        description: |
          Returns a list of existing Verifications for the input `report_id`.
        displayName: verificationsListByReport
        responses:
          '200':
            description: List of Report Verifications
            body:
              application/json:
                type: object
                properties:
                  count:
                    example: 2
                    type: integer
                  data:
                    type: array
                    items:
                      type: Verification
                  object:
                    description: A list
                    type: string
                    enum:
                      - list
          '401':
            description: Unauthorized
            body:
              application/json:
                type: UnauthorizedError
          '403':
            description: Forbidden
            body:
              application/json:
                type: ForbiddenError
        securedBy:
          - basic_auth
        (oas-summary): List existing Verifications
        (oas-tags):
          - Verifications
        (code-samples):
          - lang: curl
            source: >
              $ curl -X GET
              https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/verifications
              \
                  -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
/subscriptions:
  post:
    description: |
      Creates a new Subscription.
    displayName: createSubscription
    responses:
      '200':
        description: Subscription was successfully created
        body:
          application/json:
            type: Subscription
      '400':
        description: Bad Request
        body:
          application/json:
            type: BadRequestError
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    body:
      application/json:
        type: object
        properties:
          candidate_id:
            description: ID of the candidate being screened.
            type: string
          interval_count:
            description: The number of intervals between each recurrent background check.
            type: integer
            required: false
          interval_unit:
            description: Interval at which the subscription will repeat.
            type: string
            enum:
              - day
              - week
              - month
              - year
            required: false
          package:
            description: Package to run for the Report.
            type: string
          start_date:
            description: >-
              Start date for the subscription. This is the date on which the
              subscription will begin, and the first time the report will be
              run.
            type: date-only
        (oas-body-name): body
    securedBy:
      - basic_auth
    (oas-summary): Create a new Subscription
    (oas-tags):
      - Subscriptions
    (code-samples):
      - lang: curl
        source: |
          $ curl -X POST https://api.checkr.com/v1/subscriptions \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
              -d package=driver_pro \
              -d start_date=2017-02-10 \
              -d interval_unit=month \
              -d interval_count=1 \
              -d candidate_id=e44aa283528e6fde7d542194
  '/{id}':
    delete:
      description: |
        Cancels an existing Subscription.
      displayName: cancelSubscription
      responses:
        '200':
          description: Subscription was successfully canceled
          body:
            application/json:
              type: Subscription
        '400':
          description: Bad Request
          body:
            application/json:
              type: BadRequestError
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Cancel an existing Subscription
      (oas-tags):
        - Subscriptions
      (code-samples):
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/subscriptions/4722c07dd9a10c3985ae432a \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    get:
      description: |
        Retrieves an existing Subscription.
      displayName: getSubscription
      responses:
        '200':
          description: Subscription details
          body:
            application/json:
              type: Subscription
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      securedBy:
        - basic_auth
      (oas-summary): Retrieve an existing Subscription
      (oas-tags):
        - Subscriptions
      (code-samples):
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/subscriptions/4722c07dd9a10c3985ae432a \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    uriParameters:
      id:
        description: ID of the Subscription.
        type: string
'/candidate_stories/{id}':
  delete:
    description: Deletes the existing Candidate Story corresponding to the input ID.
    displayName: deleteCandidateStory
    responses:
      '200':
        description: Candidate Story was successfully deleted
        body:
          application/json:
            type: CandidateStory
      '400':
        description: Bad Request
        body:
          application/json:
            type: BadRequestError
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Delete a Candidate Story
    (oas-tags):
      - Candidate Stories
  get:
    description: Returns the existing Candidate Story corresponding to the input ID.
    displayName: getCandidateStory
    responses:
      '200':
        description: Candidate Story details
        body:
          application/json:
            type: CandidateStory
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve a Candidate Story
    (oas-tags):
      - Candidate Stories
  uriParameters:
    id:
      description: ID of the Candidate Story.
      type: string
'/county_criminal_searches/{id}':
  get:
    description: |
      Returns an existing County Criminal Search with the input ID.
    displayName: getCountyCriminalSearch
    responses:
      '200':
        description: County Criminal Search details
        body:
          application/json:
            type: CountyCriminalSearch
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing County Criminal Search
    (oas-tags):
      - County Criminal Search
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/county_criminal_searches/539fdcf335644a0ef4000001
          \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the County Criminal Search to retrieve.
      type: string
'/documents/{id}':
  get:
    description: >
      Returns an existing Document with the input ID.


      Report Document IDs can be retrieved from the [Retrieve an existing
      Report](#operation/getReport)

      endpoint. Candidate Document IDs can be retrieved using the

      [List a Candidate's Documents](#operation/getCandidateDocuments) endpoint.
    displayName: getDocument
    responses:
      '200':
        description: Document details
        body:
          application/json:
            type: Document
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve a Document
    (oas-tags):
      - Documents
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/documents/b73f89e14b393979857806f9 \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the Document to retrieve.
      type: string
'/education_verifications/{id}':
  get:
    description: |
      Returns an existing Education Verification with the input ID.
    displayName: getEducationVerification
    responses:
      '200':
        description: Education Verification details
        body:
          application/json:
            type: EducationVerification
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing Education Verification
    (oas-tags):
      - Education Verification
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/education_verifications/59690155331711004e252cd9
          \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the Education Verification to retrieve.
      type: string
'/employment_verifications/{id}':
  get:
    description: |
      Returns an existing Employment Verification with the input ID.
    displayName: getEmploymentVerification
    responses:
      '200':
        description: Employment Verification details
        body:
          application/json:
            type: EmploymentVerification
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing Employment Verification
    (oas-tags):
      - Employment Verification
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/employment_verifications/59690155331711004e252cd8
          \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the Employment Verification to retrieve.
      type: string
'/federal_criminal_searches/{id}':
  get:
    description: |
      Returns an existing Federal Criminal Search with the input ID.
    displayName: getFederalCriminalSearch
    responses:
      '200':
        description: Federal Criminal Search details
        body:
          application/json:
            type: FederalCriminalSearch
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing Federal Criminal Search
    (oas-tags):
      - Federal Criminal Search
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/federal_criminal_searches/539fd88c101897f7cd000006
          \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the Federal Criminal Search to retrieve.
      type: string
'/global_watchlist_searches/{id}':
  get:
    description: |
      Returns an existing Global Watchlist Search with the input ID.
    displayName: getGlobalWatchlistSearch
    responses:
      '200':
        description: Global Watchlist Search details
        body:
          application/json:
            type: GlobalWatchlistSearch
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing Global Watchlist Search
    (oas-tags):
      - Global Watchlist Search
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/global_watchlist_searches/539fd88c101897f7cd000008
          \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the Global Watchlist Search to retrieve.
      type: string
'/identity_document_verifications/{id}':
  get:
    description: |
      Returns an existing Identity Document Verification with the input ID.
    displayName: getIdentityDocumentVerification
    responses:
      '200':
        description: Identity Document Verification details
        body:
          application/json:
            type: IdentityDocumentVerification
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing Identity Document Verification
    (oas-tags):
      - Identity Document Verification
  uriParameters:
    id:
      description: ID of the Identity Document Verification to retrieve.
      type: string
'/motor_vehicle_reports/{id}':
  get:
    description: |
      Returns an existing Motor Vehicle Report with the input ID.
    displayName: getMotorVehicleReport
    responses:
      '200':
        description: Motor Vehicle Report details
        body:
          application/json:
            type: MotorVehicleReport
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing Motor Vehicle Report
    (oas-tags):
      - Motor Vehicle Report
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/motor_vehicle_reports/539fd88c101897f7cd000007
          \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the Motor Vehicle Report to retrieve.
      type: string
'/national_criminal_searches/{id}':
  get:
    description: |
      Returns an existing National Criminal Search with the input ID.
    displayName: getNationalCriminalSearch
    responses:
      '200':
        description: National Criminal Search details
        body:
          application/json:
            type: NationalCriminalSearch
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing National Criminal Search
    (oas-tags):
      - National Criminal Search
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/national_criminal_searches/539fd88c101897f7cd000006
          \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the National Criminal Search to retrieve.
      type: string
'/report/{report_id}':
  /adverse_actions:
    post:
      description: >
        Creates a new Adverse Action.


        <b>Note: </b>Report must be in a `consider` status and cannot have any
        existing Adverse Actions that have not been canceled.
      displayName: createAdverseAction
      responses:
        '200':
          description: Adverse Action was successfully created
          body:
            application/json:
              type: AdverseAction
        '400':
          description: Bad Request
          body:
            application/json:
              type: BadRequestError
        '401':
          description: Unauthorized
          body:
            application/json:
              type: UnauthorizedError
        '403':
          description: Forbidden
          body:
            application/json:
              type: ForbiddenError
      body:
        application/json:
          type: object
          properties:
            adverse_item_ids:
              description: IDs of Adverse Items selected for the Adverse Action.
              type: array
              items:
                type: string
            post_notice_scheduled_at:
              description: >-
                Time at which the Post-Adverse Action notification will be sent.
                Default is 7 days after creation.
              example: '2016-10-07T12:34:00Z'
              type: datetime
              required: false
          (oas-body-name): body
      securedBy:
        - basic_auth
      (oas-summary): Create a new Adverse Action
      (oas-tags):
        - Adverse Actions
      (code-samples):
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/reports/b861a56db1b1b89692dd6118/adverse_actions
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d post_notice_scheduled_at=2016-10-07T12:34:00Z \
                -d 'adverse_item_ids[]=57ed4ce3057e0b002adc6d90&adverse_item_ids[]=57ed4ce3057e0b002adc6d91'
  uriParameters:
    report_id:
      description: The ID of the Report for which the Adverse Action will be created.
      type: string
'/sex_offender_searches/{id}':
  get:
    description: |
      Returns an existing Sex Offender Registry Search with the input ID.
    displayName: getSexOffenderSearch
    responses:
      '200':
        description: Sex Offender Registry Search details
        body:
          application/json:
            type: SexOffenderSearch
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing Sex Offender Registry Search
    (oas-tags):
      - Sex Offender Registry Search
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/sex_offender_searches/539fd88c101897f7cd000008
          \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the Sex Offender Search to retrieve.
      type: string
'/ssn_traces/{id}':
  get:
    description: |
      Returns an existing SSN Trace with the input ID.
    displayName: getSsnTrace
    responses:
      '200':
        description: SSN Trace details
        body:
          application/json:
            type: SsnTrace
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing SSN Trace
    (oas-tags):
      - SSN Trace
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/ssn_traces/539fd88c101897f7cd000001 \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the SSN Trace to retrieve.
      type: string
'/state_criminal_searches/{id}':
  get:
    description: |
      Returns an existing State Criminal Search with the input ID.
    displayName: getStateCriminalSearch
    responses:
      '200':
        description: State Criminal Search details
        body:
          application/json:
            type: StateCriminalSearch
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve an existing State Criminal Search
    (oas-tags):
      - State Criminal Search
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/state_criminal_searches/539fdcf335644a0ef4000001
          \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    id:
      description: ID of the State Criminal Search to retrieve.
      type: string
'/verifications/{verification_id}':
  get:
    description: |
      Returns an existing Verification with the input ID
    displayName: getVerification
    responses:
      '200':
        description: Verification details
        body:
          application/json:
            type: Verification
      '401':
        description: Unauthorized
        body:
          application/json:
            type: UnauthorizedError
      '403':
        description: Forbidden
        body:
          application/json:
            type: ForbiddenError
    securedBy:
      - basic_auth
    (oas-summary): Retrieve a Verification
    (oas-tags):
      - Verifications
    (code-samples):
      - lang: curl
        source: >
          $ curl -X GET
          https://api.checkr.com/v1/verifications/db313e73383710d4fa2f18fd \
              -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  uriParameters:
    verification_id:
      type: string
